import { IfcEventData, IfcWorkerAPI, WebIfcWorkerAPI, WorkerAPIs } from '../BaseDefinitions';
import { IfcAPI } from 'web-ifc';
import { Serializer } from '../serializer/Serializer';
export declare class WebIfcWorker implements WebIfcWorkerAPI {
    private worker;
    private serializer;
    webIFC: IfcAPI;
    API: WorkerAPIs;
    constructor(worker: IfcWorkerAPI, serializer: Serializer);
    Init(data: IfcEventData): Promise<void>;
    Close(data: IfcEventData): Promise<void>;
    DisposeWebIfc(data: IfcEventData): Promise<void>;
    CloseModel(data: IfcEventData): void;
    CreateModel(data: IfcEventData): void;
    ExportFileAsIFC(data: IfcEventData): void;
    FlattenLine(data: IfcEventData): void;
    GetAllLines(data: IfcEventData): void;
    GetAndClearErrors(data: IfcEventData): void;
    GetCoordinationMatrix(data: IfcEventData): void;
    GetFlatMesh(data: IfcEventData): void;
    GetGeometry(data: IfcEventData): void;
    GetIndexArray(data: IfcEventData): void;
    GetLine(data: IfcEventData): void;
    GetLineIDsWithType(data: IfcEventData): void;
    GetRawLineData(data: IfcEventData): void;
    GetVertexArray(data: IfcEventData): void;
    IsModelOpen(data: IfcEventData): void;
    LoadAllGeometry(data: IfcEventData): void;
    OpenModel(data: IfcEventData): void;
    SetGeometryTransformation(data: IfcEventData): void;
    SetWasmPath(data: IfcEventData): void;
    StreamAllMeshes(data: IfcEventData): void;
    StreamAllMeshesWithTypes(data: IfcEventData): void;
    WriteLine(data: IfcEventData): void;
    WriteRawLineData(data: IfcEventData): void;
    getSubArray(data: IfcEventData): void;
    private nullifyWebIfc;
}
