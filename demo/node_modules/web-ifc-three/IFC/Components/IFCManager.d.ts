import { HighlightConfigOfModel } from '../BaseDefinitions';
import { BufferGeometry, Material, Scene } from 'three';
import { IFCModel } from './IFCModel';
/**
 * Contains all the logic to work with the loaded IFC files (select, edit, etc).
 */
export declare class IFCManager {
    private state;
    private parser;
    private subsets;
    private properties;
    private types;
    parse(buffer: ArrayBuffer): Promise<IFCModel>;
    setWasmPath(path: string): void;
    setupThreeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any): void;
    close(modelID: number, scene?: Scene): void;
    getExpressId(geometry: BufferGeometry, faceIndex: number): number | undefined;
    getAllItemsOfType(modelID: number, type: number, verbose: boolean): any[];
    getItemProperties(modelID: number, id: number, recursive?: boolean): any;
    getPropertySets(modelID: number, id: number, recursive?: boolean): any[];
    getTypeProperties(modelID: number, id: number, recursive?: boolean): any[];
    getIfcType(modelID: number, id: number): string;
    getSpatialStructure(modelID: number): {
        expressID: number;
        type: string;
        children: never[];
    };
    getSubset(modelID: number, material?: Material): import("three").Mesh<BufferGeometry, Material | Material[]> | null;
    removeSubset(modelID: number, scene?: Scene, material?: Material): void;
    createSubset(config: HighlightConfigOfModel): void | import("three").Mesh<BufferGeometry, Material | Material[]>;
}
