export class SubsetUtils {
    // If flatten, all indices are in the same array; otherwise, indices are split in subarrays by material
    static getAllIndicesOfGroup(ids, materialIndex, items, flatten = true) {
        const indicesByGroup = [];
        for (const id of ids) {
            const entry = items.map.get(id);
            if (!entry)
                continue;
            const value = entry[materialIndex];
            if (!value)
                continue;
            SubsetUtils.getIndexChunk(value, indicesByGroup, materialIndex, items, flatten);
        }
        return indicesByGroup;
    }
    static getIndexChunk(value, indicesByGroup, materialIndex, items, flatten) {
        const pairs = value.length / 2;
        for (let pair = 0; pair < pairs; pair++) {
            const pairIndex = pair * 2;
            const start = value[pairIndex];
            const end = value[pairIndex + 1];
            for (let j = start; j <= end; j++) {
                if (flatten)
                    indicesByGroup.push(items.indexCache[j]);
                else {
                    if (!indicesByGroup[materialIndex])
                        indicesByGroup[materialIndex] = [];
                    indicesByGroup[materialIndex].push(items.indexCache[j]);
                }
            }
        }
    }
}
//# sourceMappingURL=subset-utils.js.map