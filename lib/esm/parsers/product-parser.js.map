{"version":3,"sources":["../../../src/parsers/product-parser.ts"],"names":["ProductParser","Parser","doParse","verbose","console","log","time","jsonLDObject","buildProducts","timeEnd","tripleCount","getTripleCount","getTriples","graph","skippedTypes","IFCOPENINGELEMENT","subTypes","IFCELEMENT","filter","typeID","indexOf","expressIDArray","typeId","push","ifcAPI","properties","getAllItemsOfType","modelID","i","length","expressID","type","GlobalId","getItemProperties","URI","value","IfcElements"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;AAEA;;AACA;;AAEO,MAAMA,aAAN,SAA4BC,cAA5B,CAAkC;AAEjB,QAAPC,OAAO,GAA0B;AAE1C,SAAKC,OAAL,IAAgBC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAhB;AACA,SAAKF,OAAL,IAAgBC,OAAO,CAACC,GAAR,CAAY,EAAZ,CAAhB;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,2BAAb;AAEA,SAAKH,OAAL,IAAgBC,OAAO,CAACC,GAAR,CAAY,gCAAZ,CAAhB;AACA,SAAKF,OAAL,IAAgBC,OAAO,CAACE,IAAR,CAAa,uBAAb,CAAhB;AACA,SAAKC,YAAL,CAAkB,QAAlB,IAA8B,MAAM,KAAKC,aAAL,EAApC;AACA,SAAKL,OAAL,IAAgBC,OAAO,CAACK,OAAR,CAAgB,uBAAhB,CAAhB;AACA,SAAKN,OAAL,IAAgBC,OAAO,CAACC,GAAR,CAAY,EAAZ,CAAhB;AAEAD,IAAAA,OAAO,CAACK,OAAR,CAAgB,2BAAhB;;AAEA,QAAG,KAAKN,OAAR,EAAgB;AACZ,YAAMO,WAAW,GAAG,MAAM,KAAKC,cAAL,EAA1B;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBK,WAAhC;AACH;;AAED,WAAO,MAAM,KAAKE,UAAL,EAAb;AAEH;;AAE0B,QAAbJ,aAAa,GAAkB;AAEzC,UAAMK,KAAK,GAAG,EAAd;AAEA,UAAMC,YAAY,GAAG,CAACC,yBAAD,CAArB,CAJyC,CAMzC;;AACA,UAAMC,QAAkB,GAAG,yCAAmBC,kBAAnB,EACtBC,MADsB,CACfC,MAAM,IAAIL,YAAY,CAACM,OAAb,CAAqBD,MAArB,KAAgC,CAAC,CAD5B,CAA3B,CAPyC,CAQmB;AAG5D;;AACA,QAAIE,cAAwB,GAAG,EAA/B;;AACA,SAAI,IAAIC,MAAR,IAAkBN,QAAlB,EAA2B;AACvBK,MAAAA,cAAc,CAACE,IAAf,CAAoB,IAAG,MAAM,KAAKC,MAAL,CAAYC,UAAZ,CAAuBC,iBAAvB,CAAyC,KAAKC,OAA9C,EAAuDL,MAAvD,EAA+D,KAA/D,CAAT,CAApB;AACH;;AAED,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,cAAc,CAACQ,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,YAAME,SAAS,GAAGT,cAAc,CAACO,CAAD,CAAhC;AAEA,YAAM;AAACG,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAmB,MAAM,KAAKR,MAAL,CAAYC,UAAZ,CAAuBQ,iBAAvB,CAAyC,KAAKN,OAA9C,EAAuDG,SAAvD,CAA/B;AACA,YAAMI,GAAG,GAAG,mCAAkBF,QAAQ,CAACG,KAA3B,CAAZ,CAJ4C,CAM5C;;AACAtB,MAAAA,KAAK,CAACU,IAAN,CAAW;AACP,eAAOW,GADA;AAEP,iBAAU,OAAME,4BAAYL,IAAZ,CAAkB;AAF3B,OAAX;AAKH;;AAED,WAAOlB,KAAP;AAEH;;AA1DoC","sourcesContent":["import {\n    IFCELEMENT,\n    IFCOPENINGELEMENT\n} from 'web-ifc';\n\nimport { getElementSubtypes } from \"../helpers/class-assignment\";\nimport { Parser } from \"./parser\";\nimport { JSONLD } from \"../helpers/BaseDefinitions\";\nimport { defaultURIBuilder } from \"../helpers/uri-builder\";\nimport { IfcElements } from \"../helpers/IfcElementsMap\";\n\nexport class ProductParser extends Parser{\n\n    public async doParse(): Promise<JSONLD|string>{\n\n        this.verbose && console.log(\"Started PRODUCTS parsing\");\n        this.verbose && console.log(\"\");\n        console.time(\"Finished products parsing\");\n\n        this.verbose && console.log(\"## STEP 1: CLASS ASSIGNMENT ##\");\n        this.verbose && console.time(\"1/1: Finding products\");\n        this.jsonLDObject[\"@graph\"] = await this.buildProducts();\n        this.verbose && console.timeEnd(\"1/1: Finding products\");\n        this.verbose && console.log(\"\");\n\n        console.timeEnd(\"Finished products parsing\");\n\n        if(this.verbose){\n            const tripleCount = await this.getTripleCount();\n            console.log(\"Total triples: \" + tripleCount);\n        }\n\n        return await this.getTriples();\n\n    }\n\n    private async buildProducts(): Promise<any[]>{\n\n        const graph = [];\n\n        const skippedTypes = [IFCOPENINGELEMENT];\n\n        // Get all subTypes of IfcElement\n        const subTypes: number[] = getElementSubtypes(IFCELEMENT)\n            .filter(typeID => skippedTypes.indexOf(typeID) == -1);  // Filter out skipped types\n    \n\n        // Get all items in model that belong to any of these types\n        let expressIDArray: number[] = [];\n        for(let typeId of subTypes){\n            expressIDArray.push(...await this.ifcAPI.properties.getAllItemsOfType(this.modelID, typeId, false));\n        }\n\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            \n            const {type, GlobalId} = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID);\n            const URI = defaultURIBuilder(GlobalId.value);\n\n            // Push product\n            graph.push({\n                \"@id\": URI,\n                \"@type\": `ifc:${IfcElements[type]}`\n            });\n            \n        }\n\n        return graph;\n\n    }\n\n}"],"file":"product-parser.js"}