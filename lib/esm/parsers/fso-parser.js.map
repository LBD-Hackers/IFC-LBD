{"version":3,"sources":["../../../src/parsers/fso-parser.ts"],"names":["typeMappings","FSOParser","Parser","doParse","verbose","console","log","time","jsonLDObject","push","classify","timeEnd","portIDs","getPortIDs","portPort","portComponent","portFlowDirection","portPlacements","loadInStore","componentConections","connectionInterfaces","segmentLengths","tripleCount","getTripleCount","getTriples","graph","typeIDs","Object","keys","i","length","typeID","fsoClass","ifcAPI","modelID","IFCRELCONNECTSPORTS","subjectRef","targetRef","rdfRelationship","IFCRELCONNECTSPORTTOELEMENT","r1","r2","concat","expressIDArray","expressID","props","properties","getItemProperties","flowDirection","FlowDirection","value","portType","GlobalId","coordinates","ObjectPlacement","point","portURI","cpURI","query","executeUpdateQuery","executeSelectQuery","IFCPORT","subTypes","typeId","getAllItemsOfType"],"mappings":"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","sourcesContent":["import {\n    IFCELEMENT,\n    IFCOPENINGELEMENT\n} from 'web-ifc';\n\nimport { buildClassInstances, getElementSubtypes } from \"../helpers/class-assignment\";\nimport { Parser } from \"./parser\";\nimport { JSONLD } from \"../helpers/BaseDefinitions\";\nimport { defaultURIBuilder } from \"../helpers/uri-builder\";\nimport { IfcElements } from \"../helpers/IfcElementsMap\";\nimport { buildRelOneToOne } from '../helpers/path-search';\nimport { getGlobalPosition, getGlobalRotation } from '../helpers/object-placement';\nimport * as N3 from 'n3';\n\nconst typeMappings: {[key: number]: string[]}  = {\n    3205830791: [\"fso:DistributionSystem\"],\n    3740093272: [\"fso:Port\"],\n    987401354: [\"fso:Segment\", \"fso:Component\"],\n    4278956645: [\"fso:Fitting\", \"fso:Component\"],\n    2058353004: [\"fso:FlowController\", \"fso:Component\"],\n    1658829314: [\"fso:EnergyConversionDevice\", \"fso:Component\"],\n    3132237377: [\"fso:FlowMovingDevice\", \"fso:Component\"],\n    707683696: [\"fso:StorageDevice\", \"fso:Component\"],\n    2223149337: [\"fso:Terminal\", \"fso:Component\"],\n    3508470533: [\"fso:TreatmentDevice\", \"fso:Component\"],\n}\n\nexport class FSOParser extends Parser{\n\n    public async doParse(): Promise<JSONLD|string>{\n\n        this.verbose && console.log(\"Started FSO parsing\");\n        this.verbose && console.log(\"\");\n        console.time(\"Finished FSO parsing\");\n\n        this.verbose && console.log(\"## STEP 1: CLASS ASSIGNMENT ##\");\n        this.verbose && console.time(\"1/9: Classifying FSO items\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.classify()));\n        this.verbose && console.timeEnd(\"1/9: Classifying FSO items\");\n        this.verbose && console.log(\"\");\n\n        this.verbose && console.log(\"## STEP 2: PORTS ##\");\n        const portIDs = await this.getPortIDs();\n        this.verbose && console.time(\"2/9: Finding port-port connections\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPort()));\n        this.verbose && console.timeEnd(\"2/9: Finding port-port connections\");\n        this.verbose && console.time(\"3/9: Finding port-component connections\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portComponent()));\n        this.verbose && console.timeEnd(\"3/9: Finding port-component connections\");\n        this.verbose && console.time(\"4/9: Finding port flow directions\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portFlowDirection(portIDs)));\n        this.verbose && console.timeEnd(\"4/9: Finding port flow directions\");\n        this.verbose && console.time(\"5/9: Finding port placements\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPlacements(portIDs)));\n        this.verbose && console.timeEnd(\"5/9: Finding port placements\");\n        this.verbose && console.log(\"\");\n\n        // NB! The following steps require an in-memory triplestore to run which is slower than just operating the JSON-LD object\n        this.verbose && console.log(\"## STEP 3: POST PROCESSING ##\");\n        this.verbose && console.time(\"6/9: Loading data into in-memory triplestore for querying\");\n        await this.loadInStore();\n        this.verbose && console.timeEnd(\"6/9: Loading data into in-memory triplestore for querying\");\n        this.verbose && console.time(\"7/9: Deducing element conections from ports\");\n        await this.componentConections();\n        this.verbose && console.timeEnd(\"7/9: Deducing element conections from ports\");\n        this.verbose && console.time(\"8/9: Deducing connection interfaces\");\n        await this.connectionInterfaces();\n        this.verbose && console.timeEnd(\"8/9: Deducing connection interfaces\");\n        this.verbose && console.time(\"9/9: Calculating segment lengths\");\n        await this.segmentLengths();\n        this.verbose && console.timeEnd(\"9/9: Calculating segment lengths\");\n\n        console.timeEnd(\"Finished FSO parsing\");\n\n        if(this.verbose){\n            const tripleCount = await this.getTripleCount();\n            console.log(\"Total triples: \" + tripleCount);\n        }\n\n        return await this.getTriples();\n\n    }\n\n    /**\n     * CLASS ASSIGNMENT\n     */\n    private async classify(): Promise<any[]>{\n\n        const graph = [];\n\n        const typeIDs = Object.keys(typeMappings);\n        for (let i = 0; i < typeIDs.length; i++) {\n            const typeID: any = typeIDs[i];\n            const fsoClass = typeMappings[typeID];\n            graph.push(...(await buildClassInstances(this.ifcAPI, this.modelID, typeID, fsoClass, true)));\n        }\n\n        return graph;\n\n    }\n\n    /**\n     * RELATIONSHIP ASSIGNMENT\n     */\n\n    // <port1> fso:connectedPort <port2>\n    // <port2> fso:connectedPort <port1>\n    private async portPort(): Promise<any[]>{\n\n        const IFCRELCONNECTSPORTS = 3190031847;\n        const subjectRef = \"RelatedPort\";\n        const targetRef = \"RelatingPort\";\n        const rdfRelationship = \"fso:connectedPort\";\n        return await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTS, subjectRef, targetRef, rdfRelationship, false, true);\n\n    }\n\n    // <element> fso:connectedPort <port>\n    // <port> fso:connectedElement <element>\n    private async portComponent(): Promise<any[]>{\n\n        const IFCRELCONNECTSPORTTOELEMENT = 4201705270;\n        let subjectRef = \"RelatedElement\";\n        let targetRef = \"RelatingPort\";\n        let rdfRelationship = \"fso:connectedPort\";\n        const r1 = await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTTOELEMENT, subjectRef, targetRef, rdfRelationship);\n\n        subjectRef = \"RelatingPort\";\n        targetRef = \"RelatedElement\";\n        rdfRelationship = \"fso:connectedComponent\";\n        const r2 = await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTTOELEMENT, subjectRef, targetRef, rdfRelationship);\n\n        return r1.concat(r2);\n    }\n\n    /**\n     * PROPERTIES\n     */\n\n    // <port> a fso:InPort .\n    // <port> a fso:OutPort .\n    // <port> a fso:BidirectionalPort .\n    private async portFlowDirection(expressIDArray: number[]): Promise<any[]>{\n        \n        // Port property example\n        // Description: {type: 1, value: 'Flow'}\n        // FlowDirection: {type: 3, value: 'SINK'}\n        // GlobalId: {type: 1, value: '1noFI6neD67vh$xlz57Jcc'}\n        // Name: {type: 1, value: 'InPort_1614379'}\n        // ObjectPlacement: IfcLocalPlacement {expressID: 27954, type: 2624227202, PlacementRelTo: IfcLocalPlacement, RelativePlacement: IfcAxis2Placement3D}\n        // ObjectType: null\n        // OwnerHistory: IfcOwnerHistory {expressID: 42, type: 1207048766, OwningUser: IfcPersonAndOrganization, OwningApplication: IfcApplication, State: null, …}\n        // PredefinedType: undefined\n        // Representation: null\n        // SystemType: undefined\n        // expressID: 27956\n        // type: 3041715199\n        const graph = [];\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID);\n\n            const flowDirection = props.FlowDirection.value;\n            let portType = \"\";\n            if(flowDirection == \"SINK\") portType = \"fso:InPort\";\n            if(flowDirection == \"SOURCE\") portType = \"fso:OutPort\";\n            if(flowDirection == \"SOURCEANDSINK\") portType = \"fso:BidirectionalPort\";\n\n            if(portType != \"\"){\n                graph.push({\n                    \"@id\": defaultURIBuilder(props.GlobalId.value),\n                    \"@type\": portType\n                });\n            }\n\n        }\n\n        return graph;\n\n    }\n\n    private async portPlacements(expressIDArray: number[]): Promise<any[]>{\n        \n        const graph: any[] = [];\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID, true);\n\n            const coordinates = await getGlobalPosition(props.ObjectPlacement);\n            const point = `POINT Z(${coordinates[0]} ${coordinates[1]} ${coordinates[2]})`;\n\n            const portURI = defaultURIBuilder(props.GlobalId.value);\n            const cpURI = portURI + \"_cp\";\n\n            graph.push({\n                \"@id\": portURI,\n                \"omg:hasGeometry\": {\n                    \"@id\": cpURI,\n                    \"@type\": [\"omg:Geometry\", \"ex:CenterPoint\"],\n                    \"fog::asSfa_v2-wkt\": point\n                }\n            });\n\n        }\n\n        return graph;\n\n    }\n\n    /**\n     * POST PROCESSING\n     */\n    private async componentConections(): Promise<void>{\n        const query = `PREFIX fso: <https://w3id.org/fso#>\n                    INSERT{\n                        ?e1 fso:connectedWith ?e2 .\n                        ?e2 fso:connectedWith ?e1 .\n                        ?e1 fso:feedsFluidTo ?e2 .\n                        ?e2 fso:hasFluidFedBy ?e1\n                    }\n                    WHERE{\n                        ?e1 fso:connectedPort ?p1 .\n                        ?p1 fso:connectedPort ?p2 .\n                        ?p2 fso:connectedComponent ?e2 .\n                        ?p1 a fso:OutPort .\n                        ?p2 a fso:InPort .\n                    }`;\n        await this.executeUpdateQuery(query);\n    }\n\n    private async connectionInterfaces(): Promise<void>{\n        const query = `PREFIX fso: <https://w3id.org/fso#>\n            PREFIX func: <http://example.org/functions#>\n            INSERT{\n                ?uri a fso:ConnectionPoint ;\n                    fso:connectsFrom ?e1 ;\n                    fso:connectsTo ?e2\n            }\n            WHERE{\n                ?e1 fso:connectedPort ?p1 .\n                ?p1 fso:connectedPort ?p2 .\n                ?p2 fso:connectedComponent ?e2 .\n                ?p1 a fso:OutPort .\n                ?p2 a fso:InPort .\n                BIND(func:uri-concat(?e1, ?e1) AS ?uri)\n            }`;\n        await this.executeUpdateQuery(query);\n    }\n\n    private async segmentLengths(): Promise<void>{\n        const query = `PREFIX geosf: <http://www.opengis.net/def/function/geosparql/>\n        SELECT *\n        WHERE{\n            BIND(\"POINT Z(0 0 0)\" AS ?p1)\n            BIND(\"POINT Z(0 1 1)\" AS ?p2)\n            BIND(geosf:distance(?p1, ?p1) AS ?d)\n        }`;\n        await this.executeSelectQuery(query);\n    }\n\n    private async getPortIDs(): Promise<number[]>{\n\n        // Get all subTypes of IfcPort\n        const IFCPORT = 3740093272;\n        const subTypes = getElementSubtypes(IFCPORT);\n\n        // Get all items in model that belong to any of these types\n        let expressIDArray: number[] = [];\n        for(let typeId of subTypes){\n            expressIDArray.push(...await this.ifcAPI.properties.getAllItemsOfType(this.modelID, typeId, false));\n        }\n        return expressIDArray;\n    }\n\n    \n\n}"],"file":"fso-parser.js"}