{"version":3,"sources":["../../../src/parsers/parser.ts"],"names":["Parser","jsonLDObject","constructor","ifcAPI","modelID","format","SerializationFormat","JSONLD","verbose","getTriples","getJSONLD","NQuads","getNQuads","getTripleCount","rdf","tripleCount","length"],"mappings":";;;;;;;AAAA;;AAEA;;AAEO,MAAMA,MAAN,CAAY;AAERC,EAAAA,YAAY,GAAW;AAAC,gBAAY;AACvC,aAAO,uBADgC;AAEvC,aAAO,uBAFgC;AAGvC,aAAO,uBAHgC;AAIvC,aAAO,uBAJgC;AAKvC,YAAM,sBALiC;AAMvC,aAAO,kDANgC;AAOvC,cAAQ;AAP+B,KAAb;AAQ3B,cAAU;AARiB,GAAX;;AAenBC,EAAAA,WAAW,CAACC,MAAD,EAAwBC,OAAxB,EAAyCC,MAA2B,GAAGC,qCAAoBC,MAA3F,EAAmGC,OAAgB,GAAG,KAAtH,EAA4H;AACnI,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKK,OAAL,GAAeA,OAAf;AACA,SAAKH,MAAL,GAAcA,MAAd;AACH;;AAEsB,QAAVI,UAAU,GAA0B;AAC7C,QAAG,KAAKJ,MAAL,IAAeC,qCAAoBC,MAAtC,EAA8C,OAAO,KAAKG,SAAL,EAAP;AAC9C,QAAG,KAAKL,MAAL,IAAeC,qCAAoBK,MAAtC,EAA8C,OAAO,KAAKC,SAAL,EAAP;AAC9C,WAAO,EAAP;AACH;;AAE0B,QAAdC,cAAc,GAAmB;AAC1C,UAAMC,GAAQ,GAAG,MAAM,mBAAM,KAAKb,YAAX,CAAvB;AACA,UAAMc,WAAW,GAAGD,GAAG,CAACE,MAAxB;AACA,WAAOD,WAAP;AACH;;AAEOL,EAAAA,SAAS,GAAU;AACvB,WAAO,KAAKT,YAAZ;AACH;;AAEsB,QAATW,SAAS,GAAgB;AACnC,WAAO,MAAM,mBAAM,KAAKX,YAAX,EAAyB;AAACI,MAAAA,MAAM,EAAE;AAAT,KAAzB,CAAb;AACH;;AA1Cc","sourcesContent":["import { JSONLD, SerializationFormat } from \"../helpers/BaseDefinitions\";\nimport * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { toRDF } from \"jsonld\";\n\nexport class Parser{\n\n    public jsonLDObject: JSONLD = {\"@context\": {\n        \"bot\": \"https://w3id.org/bot#\",\n        \"fso\": \"https://w3id.org/fso#\",\n        \"omg\": \"https://w3id.org/omg#\",\n        \"fog\": \"https://w3id.org/fog#\",\n        \"ex\": \"https://example.com/\",\n        \"ifc\": \"http://ifcowl.openbimstandards.org/IFC2X3_Final#\",\n        \"inst\": \"https://example.com/\"\n    }, \"@graph\": []};\n\n    public modelID: number;\n    public ifcAPI: WebIFC.IfcAPI;\n    public verbose: boolean;\n    public format: SerializationFormat;\n\n    constructor(ifcAPI: WebIFC.IfcAPI, modelID: number, format: SerializationFormat = SerializationFormat.JSONLD, verbose: boolean = false){\n        this.modelID = modelID;\n        this.ifcAPI = ifcAPI;\n        this.verbose = verbose;\n        this.format = format;\n    }\n\n    public async getTriples(): Promise<JSONLD|string>{\n        if(this.format == SerializationFormat.JSONLD) return this.getJSONLD();\n        if(this.format == SerializationFormat.NQuads) return this.getNQuads();\n        return \"\";\n    }\n\n    public async getTripleCount(): Promise<number>{\n        const rdf: any = await toRDF(this.jsonLDObject);\n        const tripleCount = rdf.length;\n        return tripleCount;\n    }\n\n    private getJSONLD(): JSONLD{\n        return this.jsonLDObject;\n    }\n\n    private async getNQuads(): Promise<any>{\n        return await toRDF(this.jsonLDObject, {format: 'application/n-quads'});\n    }\n\n}"],"file":"parser.js"}