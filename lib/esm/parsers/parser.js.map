{"version":3,"sources":["../../../src/parsers/parser.ts"],"names":["Parser","jsonLDObject","prefixes","communicaEngine","store","N3","Store","constructor","ifcAPI","modelID","format","SerializationFormat","JSONLD","verbose","getTriples","getJSONLD","NQuads","getNQuads","getTripleCount","rdf","tripleCount","length","loadInStore","quads","addQuads","executeUpdateQuery","query","engine","result","sources","extensionFunctions","updateResult","executeSelectQuery","data","resultToString","pipe","process","stdout","getStoreSize","size","nquads","getQuads","doc","compacted","serializeStoreContent","N3Format","Turtle","Promise","resolve","reject","writer","Writer","i","addQuad","end","error"],"mappings":"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","sourcesContent":["import { JSONLD, N3Format, SerializationFormat } from \"../helpers/BaseDefinitions\";\nimport * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { prefixes } from '../helpers/prefixes';\nimport { extensionFunctions } from '../helpers/communica-extension-functions';\nimport { toRDF, fromRDF, compact } from \"jsonld\";\nimport * as N3 from 'n3';\nimport { newEngine } from '@comunica/actor-init-sparql-rdfjs';\n\nexport class Parser{\n\n    public jsonLDObject: JSONLD = {\"@context\": prefixes, \"@graph\": []};\n\n    public modelID: number;\n    public ifcAPI: WebIFC.IfcAPI;\n    public verbose: boolean;\n    public format: SerializationFormat;\n    public communicaEngine = newEngine();\n    public store: N3.Store = new N3.Store();\n\n    constructor(ifcAPI: WebIFC.IfcAPI, modelID: number, format: SerializationFormat = SerializationFormat.JSONLD, verbose: boolean = false){\n        this.modelID = modelID;\n        this.ifcAPI = ifcAPI;\n        this.verbose = verbose;\n        this.format = format;\n    }\n\n    public async getTriples(): Promise<JSONLD|string>{\n        if(this.format == SerializationFormat.JSONLD) return this.getJSONLD();\n        if(this.format == SerializationFormat.NQuads) return this.getNQuads();\n        return \"\";\n    }\n\n    public async getTripleCount(): Promise<number>{\n        const rdf: any = await toRDF(this.jsonLDObject);\n        const tripleCount = rdf.length;\n        return tripleCount;\n    }\n\n    public async loadInStore(): Promise<void>{\n        const quads: any = await toRDF(this.jsonLDObject);\n        await this.store.addQuads(quads);\n    }\n\n    public async executeUpdateQuery(query: string): Promise<void>{\n        // Initiate the update\n        const engine = newEngine();\n        const result: any = await engine.query(query, {\n            sources: [this.store],\n            extensionFunctions\n        });\n        \n        // Wait for the update to complete\n        await result.updateResult;\n    }\n\n    public async executeSelectQuery(query: string): Promise<void>{\n        // Initiate the update\n        const engine = newEngine();\n        const result: any = await engine.query(query, {\n            sources: [this.store],\n            extensionFunctions\n        });\n        \n        const { data } = await engine.resultToString(result,\n            'application/sparql-results+json');\n        data.pipe(process.stdout); // Print to standard output\n    }\n\n    public getStoreSize(): number{\n        return this.store.size;\n    }\n\n    private async getJSONLD(): Promise<JSONLD>{\n        // If store is up, serialize the content of the store\n        if(this.store.size > 0){\n            const nquads = this.store.getQuads(null, null, null, null);\n            const doc = await fromRDF(nquads);\n            const compacted = await compact(doc, this.jsonLDObject[\"@context\"]);\n            return compacted as JSONLD;\n        }\n        // If not, simply return the JSON-LD object\n        return this.jsonLDObject;\n    }\n\n    private async getNQuads(): Promise<any>{\n        // If store is up, serialize the content of the store\n        if(this.store.size > 0){\n\n        }\n        // If not, simply convert the JSON-LD object\n        return await toRDF(this.jsonLDObject, {format: 'application/n-quads'});\n    }\n\n    private async serializeStoreContent(format: N3Format = N3Format.Turtle): Promise<string>{\n\n        return new Promise((resolve, reject) => {\n\n            const writer = new N3.Writer({ prefixes: prefixes, format });\n            const quads = this.store.getQuads(null, null, null, null);\n\n            for (let i = 0; i < quads.length; i++) {\n                writer.addQuad(quads[i]);\n            }\n\n            writer.end((error, result) => {\n                if(error) reject(error);\n                resolve(result);\n            });\n\n        })\n        \n    }\n\n}"],"file":"parser.js"}