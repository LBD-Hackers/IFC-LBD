{"version":3,"sources":["../../src/cli-tool.ts"],"names":["readFileP","util","promisify","readFile","writeFileP","writeFile","supportedSubsets","CLITool","init","argv","process","version","command","yargs","positional","describe","choices","demandOption","verbose","console","info","option","alias","type","description","default","parse","parseFile","lbdParser","undefined","log","subset","_","toLowerCase","indexOf","error","map","s","join","ifcApi","WebIFC","IfcAPI","Init","fileData","inputFile","modelID","OpenModel","triples","parseBOTTriples","parseFSOTriples","parseProductTriples","CloseModel","format","outputFile","JSON","stringify","fp","replace","nquads","toString"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;AAFA,MAAMA,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeC,YAAf,CAAlB;AACA,MAAMC,UAAU,GAAGH,IAAI,CAACC,SAAL,CAAeG,aAAf,CAAnB;AAIA,MAAMC,gBAAgB,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAAzB;;AAEO,MAAMC,OAAN,CAAa;AAIC,QAAJC,IAAI,GAAE;AAEf,SAAKC,IAAL,GAAY,MAAM,oBAAM,sBAAQC,OAAO,CAACD,IAAhB,CAAN,EACbE,OADa,CACLA,gBADK,EAEbC,OAFa,CAEL,UAFK,EAEO,WAFP,EAEqBC,KAAD,IAAW;AACzC,aAAOA,KAAK,CACXC,UADM,CACK,QADL,EACe;AAClBC,QAAAA,QAAQ,EAAE,0CADQ;AAElBC,QAAAA,OAAO,EAAEV,gBAFS;AAGlBW,QAAAA,YAAY,EAAE;AAHI,OADf,CAAP;AAMH,KATa,EASVR,IAAD,IAAU;AACT,UAAIA,IAAI,CAACS,OAAT,EAAkBC,OAAO,CAACC,IAAR,CAAc,gBAAeX,IAAI,CAAC,WAAD,CAAc,EAA/C,EADT,CAET;AACH,KAZa,EAabY,MAba,CAaN,YAbM,EAaQ;AAClBC,MAAAA,KAAK,EAAE,GADW;AAElBC,MAAAA,IAAI,EAAE,QAFY;AAGlBC,MAAAA,WAAW,EAAE,aAHK;AAIlBP,MAAAA,YAAY,EAAE;AAJI,KAbR,EAmBbI,MAnBa,CAmBN,aAnBM,EAmBS;AACnBC,MAAAA,KAAK,EAAE,GADY;AAEnBC,MAAAA,IAAI,EAAE,QAFa;AAGnBC,MAAAA,WAAW,EAAE,2BAHM;AAInBC,MAAAA,OAAO,EAAE;AAJU,KAnBT,EAyBbJ,MAzBa,CAyBN,QAzBM,EAyBI;AACdC,MAAAA,KAAK,EAAE,GADO;AAEdC,MAAAA,IAAI,EAAE,QAFQ;AAGdC,MAAAA,WAAW,EAAE,eAHC;AAIdR,MAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,CAJK;AAKdS,MAAAA,OAAO,EAAE;AALK,KAzBJ,EAgCbJ,MAhCa,CAgCN,SAhCM,EAgCK;AACfC,MAAAA,KAAK,EAAE,GADQ;AAEfC,MAAAA,IAAI,EAAE,SAFS;AAGfC,MAAAA,WAAW,EAAE;AAHE,KAhCL,EAqCbE,KArCa,EAAlB;AAuCA,WAAO,KAAKjB,IAAZ;AAEH;;AAEqB,QAATkB,SAAS,CAACC,SAAD,EAAsB;AAExC,QAAG,KAAKnB,IAAL,CAAU,YAAV,KAA2BoB,SAA9B,EAAyC;AAEzC,SAAKpB,IAAL,CAAU,SAAV,KAAwBU,OAAO,CAACW,GAAR,CAAY,8BAAZ,CAAxB;;AAEA,UAAMC,MAAM,GAAG,KAAKtB,IAAL,CAAUuB,CAAV,CAAY,CAAZ,EAAeC,WAAf,EAAf;;AACA,QAAG3B,gBAAgB,CAAC4B,OAAjB,CAAyBH,MAAzB,KAAoC,CAAC,CAAxC,EAA0C;AACtC,aAAOZ,OAAO,CAACgB,KAAR,CAAe,qDAAoD7B,gBAAgB,CAAC8B,GAAjB,CAAqBC,CAAC,IAAK,IAAGA,CAAE,GAAhC,EAAoCC,IAApC,CAAyC,IAAzC,CAA+C,GAAlH,CAAP;AACH,KATuC,CAWxC;;;AACA,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAX,EAAf;AACA,UAAMF,MAAM,CAACG,IAAP,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM3C,SAAS,CAAC,KAAKS,IAAL,CAAUmC,SAAX,CAAhC;AACA,UAAMC,OAAO,GAAGN,MAAM,CAACO,SAAP,CAAiBH,QAAjB,CAAhB,CAfwC,CAiBxC;;AACA,QAAII,OAAJ;AACA,QAAGhB,MAAM,IAAI,KAAb,EAAoBgB,OAAO,GAAG,MAAMnB,SAAS,CAACoB,eAAV,CAA0BT,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKpC,IAAL,CAAU,SAAV,CAA3C,CAAhB;AACpB,QAAGsB,MAAM,IAAI,KAAb,EAAoBgB,OAAO,GAAG,MAAMnB,SAAS,CAACqB,eAAV,CAA0BV,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKpC,IAAL,CAAU,SAAV,CAA3C,CAAhB;AACpB,QAAGsB,MAAM,IAAI,UAAb,EAAyBgB,OAAO,GAAG,MAAMnB,SAAS,CAACsB,mBAAV,CAA8BX,MAA9B,EAAsCM,OAAtC,EAA+C,KAAKpC,IAAL,CAAU,SAAV,CAA/C,CAAhB;AAEzB,QAAG,CAACsC,OAAD,IAAYA,OAAO,IAAIlB,SAA1B,EAAqC,OAAOV,OAAO,CAACW,GAAR,CAAY,oCAAZ,CAAP,CAvBG,CAyBxC;;AACAS,IAAAA,MAAM,CAACY,UAAP,CAAkBN,OAAlB,EA1BwC,CA4BxC;;AACA,QAAG,KAAKpC,IAAL,CAAU2C,MAAV,IAAoB,QAAvB,EAAgC;AAC5B,YAAMhD,UAAU,CAAC,KAAKK,IAAL,CAAU4C,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeR,OAAf,EAAwB,IAAxB,EAA8B,IAA9B,CAAvB,EAA4D,MAA5D,CAAhB;AACH;;AACD,QAAG,KAAKtC,IAAL,CAAU2C,MAAV,IAAoB,QAAvB,EAAgC;AAC5B,YAAMI,EAAE,GAAG,KAAK/C,IAAL,CAAU4C,UAAV,CAAqBI,OAArB,CAA6B,OAA7B,EAAsC,KAAtC,CAAX;AACA,YAAMC,MAAc,GAAG,OAAOX,OAAP,IAAkB,QAAlB,GAA6BA,OAAO,CAACY,QAAR,EAA7B,GAAkDZ,OAAzE;AACA,YAAM3C,UAAU,CAACoD,EAAD,EAAKE,MAAL,EAAa,MAAb,CAAhB;AACH;AAEJ;;AAvFe","sourcesContent":["import yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport {version} from '../package.json';\nimport { readFile, writeFile } from \"fs\";\nimport * as util from \"util\";\nconst readFileP = util.promisify(readFile);\nconst writeFileP = util.promisify(writeFile);\nimport * as WebIFC from \"web-ifc/web-ifc-api\";\nimport { LBDParser } from '.';\n\nconst supportedSubsets = [\"bot\", \"fso\", \"products\"];\n\nexport class CLITool{\n\n    public argv: any;\n\n    public async init(){\n\n        this.argv = await yargs(hideBin(process.argv))\n            .version(version)   \n            .command('[subset]', 'parse ifc', (yargs) => {\n                return yargs\n                .positional('subset', {\n                    describe: 'what information do you wish to extract?',\n                    choices: supportedSubsets,\n                    demandOption: true\n                })\n            }, (argv) => {\n                if (argv.verbose) console.info(`Parsing IFC :${argv[\"file-path\"]}`)\n                // serve(argv.port)\n            })\n            .option('input-file', {\n                alias: 'i',\n                type: 'string',\n                description: 'Path to IFC',\n                demandOption: true\n            })\n            .option('output-file', {\n                alias: 'o',\n                type: 'string',\n                description: 'Path to resulting triples',\n                default: './triples.json'\n            })\n            .option('format', {\n                alias: 'f',\n                type: 'string',\n                description: 'Output format',\n                choices: [\"jsonld\", \"nquads\"],\n                default: 'jsonld'\n            })\n            .option('verbose', {\n                alias: 'v',\n                type: 'boolean',\n                description: 'Run with verbose logging'\n            })\n            .parse();\n    \n        return this.argv;\n\n    }\n\n    public async parseFile(lbdParser: LBDParser){\n        \n        if(this.argv[\"input-file\"] == undefined) return;\n\n        this.argv[\"verbose\"] && console.log(\"Running with verbose logging\");\n\n        const subset = this.argv._[0].toLowerCase();\n        if(supportedSubsets.indexOf(subset) == -1){\n            return console.error(`Unsupported subset option. Supported options are [${supportedSubsets.map(s => `\"${s}\"`).join(\", \")}]`)\n        }\n\n        // Init API and load model\n        const ifcApi = new WebIFC.IfcAPI();\n        await ifcApi.Init();\n        const fileData = await readFileP(this.argv.inputFile);\n        const modelID = ifcApi.OpenModel(fileData);\n\n        // Init LBD Parser and parse BOT\n        let triples;\n        if(subset == \"bot\") triples = await lbdParser.parseBOTTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n        if(subset == \"fso\") triples = await lbdParser.parseFSOTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n        if(subset == \"products\") triples = await lbdParser.parseProductTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n\n        if(!triples || triples == undefined) return console.log(\"Found nothing relevant in the file\");\n\n        // Close the model, all memory is freed\n        ifcApi.CloseModel(modelID);\n\n        // Serialize result\n        if(this.argv.format == \"jsonld\"){\n            await writeFileP(this.argv.outputFile, JSON.stringify(triples, null, \"\\t\"), 'utf8');\n        }\n        if(this.argv.format == \"nquads\"){\n            const fp = this.argv.outputFile.replace(\".json\", \".nq\");\n            const nquads: string = typeof triples != \"string\" ? triples.toString() : triples;\n            await writeFileP(fp, nquads, 'utf8');\n        }\n\n    }\n\n}"],"file":"cli-tool.js"}