{"version":3,"sources":["../../../src/helpers/path-search.ts"],"names":["buildRelOneToOne","ifcAPI","modelID","relationshipType","subjectRef","targetRef","rdfRelationship","includeInterface","biderectional","graph","rels","properties","getAllItemsOfType","i","length","relID","relProps","getItemProperties","subject","target","Promise","all","value","subjectURI","GlobalId","targetURI","interfaceURI","push","expressID","buildRelOneToMany","subjectClassConstraint","targetClassConstraint","type","targetPromises","targets","targetObjects","filter","t","map"],"mappings":"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","sourcesContent":["import * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { defaultURIBuilder } from \"./uri-builder\";\n\nexport async function buildRelOneToOne(ifcAPI: WebIFC.IfcAPI, modelID: number = 0, relationshipType: number, subjectRef: string, targetRef: string, rdfRelationship: string, includeInterface: boolean = false, biderectional: boolean = false): Promise<any>{\n\n    const graph = [];\n\n    const rels = await ifcAPI.properties.getAllItemsOfType(modelID, relationshipType, false);\n\n    for (let i = 0; i < rels.length; i++) {\n\n        const relID = rels[i];\n\n        const relProps = await ifcAPI.properties.getItemProperties(modelID, relID);\n\n        // Only continue if the interface is between an element and a space\n        if(!relProps[subjectRef] || !relProps[targetRef]) { continue; }\n\n        // Get properties of related and relating\n        const [subject, target] = await Promise.all([\n            ifcAPI.properties.getItemProperties(modelID, relProps[subjectRef].value),\n            ifcAPI.properties.getItemProperties(modelID, relProps[targetRef].value)\n        ]);\n\n        const subjectURI = defaultURIBuilder(subject.GlobalId.value);\n        const targetURI = defaultURIBuilder(target.GlobalId.value);\n        const interfaceURI = defaultURIBuilder(relProps.GlobalId.value);\n\n        // Push relationships\n        graph.push({\n            \"@id\": subjectURI,\n            [rdfRelationship]: {\"@id\": targetURI}\n        });\n\n        // Optionally, push it in opposite direction\n        if(biderectional){\n            graph.push({\n                \"@id\": targetURI,\n                [rdfRelationship]: {\"@id\": subjectURI}\n            });\n        }\n\n        // Optionally, also include the interface\n        if(includeInterface){\n            graph.push({\n                \"@id\": interfaceURI,\n                \"@type\": \"bot:Interface\",\n                \"ex:expressID\": relProps.expressID,\n                \"bot:interfaceOf\": [\n                    {\"@id\": subjectURI},\n                    {\"@id\": targetURI}\n                ]\n            });\n        }\n\n    }\n\n    return graph;\n\n}\n\nexport async function buildRelOneToMany(ifcAPI: WebIFC.IfcAPI, modelID: number = 0, relationshipType: number, subjectRef: string, targetRef: string, rdfRelationship: string, subjectClassConstraint?: number, targetClassConstraint?: number): Promise<any>{\n\n    const graph = [];\n\n    const rels = await ifcAPI.properties.getAllItemsOfType(modelID, relationshipType, false);\n\n    for (let i = 0; i < rels.length; i++) {\n\n        const relID = rels[i];\n\n        const relProps = await ifcAPI.properties.getItemProperties(modelID, relID);\n\n        // Only continue if the interface is between an element and a space\n        if(!relProps[subjectRef] || !relProps[targetRef]) { continue; }\n\n        const subject = await ifcAPI.properties.getItemProperties(modelID, relProps[subjectRef].value);\n\n        // It might be that we are only interested in relationship where the subject fulfills the constraint\n        if(subjectClassConstraint && subject.type != subjectClassConstraint) { continue; }\n\n        const targetPromises: any = [];\n        for (let i = 0; i < relProps[targetRef].length; i++) {\n            targetPromises.push(ifcAPI.properties.getItemProperties(modelID, relProps[targetRef][i].value));\n        }\n        const targets = await Promise.all(targetPromises);\n\n        const targetObjects = targets\n            .filter((t: any) => {\n                // It might be that we are only interested in relationship where the target fulfills the constraint\n                if(targetClassConstraint && t.type != targetClassConstraint) return false;\n                return true;\n            })\n            .map((t: any) => {\n                const targetURI = defaultURIBuilder(t.GlobalId.value);\n                return {\"@id\": targetURI}\n            });\n\n        // Skip if no target objects\n        if(!targetObjects.length) { continue; }\n\n        const subjectURI = defaultURIBuilder(subject.GlobalId.value);\n\n        // Push relationships\n        graph.push({\n            \"@id\": subjectURI,\n            [rdfRelationship]: targetObjects\n        });\n\n    }\n\n    return graph;\n\n}"],"file":"path-search.js"}