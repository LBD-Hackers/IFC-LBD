{"version":3,"sources":["../../../src/helpers/communica-extension-functions.ts"],"names":["DF","DataFactory","extensionFunctions","args","arg","termType","datatype","value","literal","toUpperCase","getID","getNamespace","uri1","uri2","ns","id1","id2","namedNode","uri","indexOf","split","pop","arr","join"],"mappings":";;;;;;;AAAA;;AAGA,MAAMA,EAAE,GAAG,IAAIC,2BAAJ,EAAX;AAEO,MAAMC,kBAAkB,GAAG;AAC9B,+CAA6CC,IAA7C,EAA+D;AAC3D,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,SAAjB,IAA8BD,GAAG,CAACE,QAAJ,CAAaC,KAAb,KAAuB,yCAAzD,EAAoG;AAChG,aAAOP,EAAE,CAACQ,OAAH,CAAWJ,GAAG,CAACG,KAAJ,CAAUE,WAAV,EAAX,EAAoCL,GAAG,CAACE,QAAxC,CAAP;AACH;;AACD,WAAOF,GAAP;AACH,GAP6B;;AAQ9B,wCAAsCD,IAAtC,EAAwD;AACpD,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,WAArB,EAAkC;AAC9B,aAAOL,EAAE,CAACQ,OAAH,CAAWE,KAAK,CAACN,GAAD,CAAhB,CAAP;AACH;;AACD,WAAOA,GAAP;AACH,GAd6B;;AAe9B,+CAA6CD,IAA7C,EAA+D;AAC3D,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,WAArB,EAAkC;AAC9B,aAAOL,EAAE,CAACQ,OAAH,CAAWG,YAAY,CAACP,GAAD,CAAvB,CAAP;AACH;;AACD,WAAOA,GAAP;AACH,GArB6B;;AAsB9B,4CAA0CD,IAA1C,EAA4D;AACxD,UAAMS,IAAI,GAAGT,IAAI,CAAC,CAAD,CAAjB;AACA,UAAMU,IAAI,GAAGV,IAAI,CAAC,CAAD,CAAjB;;AACA,QAAIS,IAAI,CAACP,QAAL,KAAkB,WAAlB,IAAiCQ,IAAI,CAACR,QAAL,KAAkB,WAAvD,EAAoE;AAC9D,YAAMS,EAAE,GAAGH,YAAY,CAACC,IAAD,CAAvB;AACA,YAAMG,GAAG,GAAGL,KAAK,CAACE,IAAD,CAAjB;AACA,YAAMI,GAAG,GAAGN,KAAK,CAACG,IAAD,CAAjB;AACA,aAAOb,EAAE,CAACiB,SAAH,CAAaH,EAAE,GAAGC,GAAL,GAAWC,GAAxB,CAAP;AACL;;AACD,WAAOhB,EAAE,CAACQ,OAAH,CAAW,OAAX,CAAP;AACH;;AAhC6B,CAA3B;;;AAmCP,SAASE,KAAT,CAAeQ,GAAf,EAA6B;AACzB,SAAOA,GAAG,CAACX,KAAJ,CAAUY,OAAV,CAAkB,GAAlB,KAA0B,CAAC,CAA3B,GAA+BD,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAA/B,GAAyDF,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAAhE;AACH;;AAED,SAASV,YAAT,CAAsBO,GAAtB,EAAoC;AAChC,MAAGA,GAAG,CAACX,KAAJ,CAAUY,OAAV,CAAkB,GAAlB,KAA0B,CAAC,CAA9B,EAAgC;AAC5B,WAAOD,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqB,CAArB,IAAwB,GAA/B;AACH,GAFD,MAEK;AACD,UAAME,GAAG,GAAGJ,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,CAAZ;AACAE,IAAAA,GAAG,CAACD,GAAJ;AACA,WAAOC,GAAG,CAACC,IAAJ,CAAS,GAAT,IAAgB,GAAvB;AACH;AACJ","sourcesContent":["import { DataFactory } from \"rdf-data-factory\";\nimport type * as RDF from '@rdfjs/types';\n\nconst DF = new DataFactory();\n\nexport const extensionFunctions = {\n    'http://example.org/functions#to-upper-case'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'Literal' && arg.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n            return DF.literal(arg.value.toUpperCase(), arg.datatype);\n        }\n        return arg;\n    },\n    'http://example.org/functions#get-id'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'NamedNode') {\n            return DF.literal(getID(arg));\n        }\n        return arg;\n    },\n    'http://example.org/functions#get-namespace'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'NamedNode') {\n            return DF.literal(getNamespace(arg));\n        }\n        return arg;\n    },\n    'http://example.org/functions#uri-concat'(args: RDF.Term[]) {\n        const uri1 = args[0];\n        const uri2 = args[1];\n        if (uri1.termType === 'NamedNode' && uri2.termType === 'NamedNode') {\n              const ns = getNamespace(uri1);\n              const id1 = getID(uri1);\n              const id2 = getID(uri2);\n              return DF.namedNode(ns + id1 + id2);\n        }\n        return DF.literal(\"ERROR\");\n    }\n}\n\nfunction getID(uri: RDF.Term){\n    return uri.value.indexOf(\"#\") != -1 ? uri.value.split(\"#\")[1] : uri.value.split(\"/\").pop();\n}\n\nfunction getNamespace(uri: RDF.Term){\n    if(uri.value.indexOf(\"#\") != -1){\n        return uri.value.split(\"#\")[0]+\"#\";\n    }else{\n        const arr = uri.value.split(\"/\");\n        arr.pop();\n        return arr.join(\"/\") + \"/\";\n    }\n}"],"file":"communica-extension-functions.js"}