{"version":3,"sources":["../../../src/helpers/class-assignment.ts"],"names":["buildClassInstances","ifcAPI","modelID","ifcType","rdfClasses","includeSubTypes","items","subTypes","getElementSubtypes","i","length","push","properties","getAllItemsOfType","buildClassInstancesFromExpressIDs","expressIDs","graph","expressID","GlobalId","getItemProperties","URI","value","type","treeNode","searchProductTree","IfcTypesTree","collectAllIds","node","typeID","id","children","result","ids"],"mappings":"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","sourcesContent":["import * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { TreeNode } from \"./BaseDefinitions\";\nimport { IfcTypesTree } from \"./IfcTypesTree\";\nimport { defaultURIBuilder } from \"./uri-builder\";\n\nexport async function buildClassInstances(ifcAPI: WebIFC.IfcAPI, modelID: number, ifcType: number, rdfClasses: string[], includeSubTypes: boolean = false): Promise<any[]>{\n\n    let items: any[] = [];\n\n    // Traversing IfcProductTree for subtypes takes around 0.3ms, so not very expensive\n    if(includeSubTypes){\n\n        const subTypes: number[] = getElementSubtypes(ifcType);\n\n        for (let i = 0; i < subTypes.length; i++) {\n            items.push(...await ifcAPI.properties.getAllItemsOfType(modelID, subTypes[i], false));\n        }\n\n    }else{\n        items = await ifcAPI.properties.getAllItemsOfType(modelID, ifcType, false);\n    }\n\n    return buildClassInstancesFromExpressIDs(ifcAPI, modelID, items, rdfClasses);\n    \n}\n\nexport async function buildClassInstancesFromExpressIDs(ifcAPI: WebIFC.IfcAPI, modelID: number, expressIDs: number[], rdfClasses: string[]){\n\n    const graph = [];\n\n    for (let i = 0; i < expressIDs.length; i++) {\n        const expressID = expressIDs[i];\n        const { GlobalId } = await ifcAPI.properties.getItemProperties(modelID, expressID);\n        const URI = defaultURIBuilder(GlobalId.value);\n\n        // Push spaces\n        graph.push({\n            \"@id\": URI,\n            \"@type\": rdfClasses\n        });\n    }\n\n    return graph;\n\n}\n\nexport function getElementSubtypes(type: number): number[]{\n\n    let subTypes: number[] = [];\n\n    // Get the tree node that corresponds to the requested type\n    const treeNode = searchProductTree(IfcTypesTree, type);\n\n    if(treeNode){\n        // Get all typeIds for the node itself and its subtypes\n        collectAllIds(treeNode, subTypes);\n    }\n\n    return subTypes;\n\n    // Search IfcProductTree for the particular typeID and get the node\n    function searchProductTree(node: TreeNode, typeID: number): TreeNode|null{\n        if(node.id == typeID){\n             return node;\n        }else if (node.children != null){\n             var i;\n             var result: TreeNode|null = null;\n             for(i=0; result == null && i < node.children.length; i++){\n                  result = searchProductTree(node.children[i], typeID);\n             }\n             return result;\n        }\n        return null;\n    }\n\n    // Collect all ids of tree node and its children\n    function collectAllIds(node: TreeNode, ids: number[] = []){\n        ids.push(node.id);\n        if(node.children){\n            for (let i = 0; i < node.children.length; i++) {\n                collectAllIds(node.children[i], ids);\n            }\n        }\n    }\n\n}"],"file":"class-assignment.js"}