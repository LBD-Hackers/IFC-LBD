{"version":3,"sources":["../../src/index.ts"],"names":["LBDParser","format","SerializationFormat","JSONLD","WebIFC","IfcAPI","path","ifcApi","SetWasmPath","modelID","verbose","botParser","BOTParser","doParse","productParser","ProductParser","PropertyParser","fsoParser","FSOParser","tsoParser","TSOParser"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;IAEaA,S;AAET;AAKA,uBAAqE;AAAA,QAAzDC,MAAyD,uEAA3BC,qCAAoBC,MAAO;;AAAA;;AAAA,oCAJtC,IAAIC,MAAM,CAACC,MAAX,EAIsC;;AACjE,SAAKJ,MAAL,GAAcA,MAAd;AACH;;;;WAED,qBAAmBK,IAAnB,EAAgC;AAC5B,WAAKC,MAAL,CAAYC,WAAZ,CAAwBF,IAAxB;AACH;;;;qFAED,iBAA6BC,MAA7B,EAAoDE,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqEC,gBAAAA,OAArE,2DAAwF,KAAxF;AACUC,gBAAAA,SADV,GACsB,IAAIC,oBAAJ,CAAcL,MAAd,EAAsBE,OAAtB,EAA+B,KAAKR,MAApC,EAA4CS,OAA5C,CADtB;AAAA;AAAA,uBAEiBC,SAAS,CAACE,OAAV,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yFAKA,kBAAiCN,MAAjC,EAAwDE,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyEC,gBAAAA,OAAzE,8DAA4F,KAA5F;AACUI,gBAAAA,aADV,GAC0B,IAAIC,4BAAJ,CAAkBR,MAAlB,EAA0BE,OAA1B,EAAmC,KAAKR,MAAxC,EAAgDS,OAAhD,CAD1B;AAAA;AAAA,uBAEiBI,aAAa,CAACD,OAAd,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;0FAKA,kBAAkCN,MAAlC,EAAyDE,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0EC,gBAAAA,OAA1E,8DAA6F,KAA7F;AACUI,gBAAAA,aADV,GAC0B,IAAIE,8BAAJ,CAAmBT,MAAnB,EAA2BE,OAA3B,EAAoC,KAAKR,MAAzC,EAAiDS,OAAjD,CAD1B;AAAA;AAAA,uBAEiBI,aAAa,CAACD,OAAd,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFAKA,kBAA6BN,MAA7B,EAAoDE,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqEC,gBAAAA,OAArE,8DAAwF,KAAxF;AACUO,gBAAAA,SADV,GACsB,IAAIC,oBAAJ,CAAcX,MAAd,EAAsBE,OAAtB,EAA+B,KAAKR,MAApC,EAA4CS,OAA5C,CADtB;AAAA;AAAA,uBAEiBO,SAAS,CAACJ,OAAV,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFAKA,kBAA6BN,MAA7B,EAAoDE,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqEC,gBAAAA,OAArE,8DAAwF,KAAxF;AACUS,gBAAAA,SADV,GACsB,IAAIC,oBAAJ,CAAcb,MAAd,EAAsBE,OAAtB,EAA+B,KAAKR,MAApC,EAA4CS,OAA5C,CADtB;AAAA;AAAA,uBAEiBS,SAAS,CAACN,OAAV,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import * as WebIFC from \"web-ifc/web-ifc-api\";\r\nimport { BOTParser } from \"./parsers/bot-parser\";\r\nimport { ProductParser } from \"./parsers/product-parser\";\r\nimport { PropertyParser } from \"./parsers/property-parser\";\r\nimport { CLITool } from \"./cli-tool\";\r\nimport { JSONLD, SerializationFormat } from \"./helpers/BaseDefinitions\";\r\nimport { FSOParser } from \"./parsers/fso-parser\";\r\nimport { TSOParser } from \"./parsers/tso-parser\";\r\n\r\nexport class LBDParser{\r\n\r\n    // initialize the API\r\n    public ifcApi: WebIFC.IfcAPI = new WebIFC.IfcAPI();\r\n    \r\n    public format: SerializationFormat;\r\n\r\n    constructor(format: SerializationFormat = SerializationFormat.JSONLD){\r\n        this.format = format;\r\n    }\r\n\r\n    public setWasmPath(path: string){\r\n        this.ifcApi.SetWasmPath(path);\r\n    }\r\n\r\n    public async parseBOTTriples(ifcApi: WebIFC.IfcAPI, modelID: number, verbose: boolean = false): Promise<JSONLD|string>{\r\n        const botParser = new BOTParser(ifcApi, modelID, this.format, verbose);\r\n        return await botParser.doParse();\r\n    }\r\n\r\n    public async parseProductTriples(ifcApi: WebIFC.IfcAPI, modelID: number, verbose: boolean = false): Promise<JSONLD|string>{\r\n        const productParser = new ProductParser(ifcApi, modelID, this.format, verbose);\r\n        return await productParser.doParse();\r\n    }\r\n\r\n    public async parsePropertyTriples(ifcApi: WebIFC.IfcAPI, modelID: number, verbose: boolean = false): Promise<JSONLD|string>{\r\n        const productParser = new PropertyParser(ifcApi, modelID, this.format, verbose);\r\n        return await productParser.doParse();\r\n    }\r\n\r\n    public async parseFSOTriples(ifcApi: WebIFC.IfcAPI, modelID: number, verbose: boolean = false): Promise<JSONLD|string>{\r\n        const fsoParser = new FSOParser(ifcApi, modelID, this.format, verbose);\r\n        return await fsoParser.doParse();\r\n    }\r\n\r\n    public async parseTSOTriples(ifcApi: WebIFC.IfcAPI, modelID: number, verbose: boolean = false): Promise<JSONLD|string>{\r\n        const tsoParser = new TSOParser(ifcApi, modelID, this.format, verbose);\r\n        return await tsoParser.doParse();\r\n    }\r\n\r\n}"],"file":"index.js"}