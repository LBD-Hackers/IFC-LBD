{"version":3,"sources":["../../../src/helpers/communica-extension-functions.ts"],"names":["DF","DataFactory","extensionFunctions","args","arg","termType","datatype","value","literal","toUpperCase","getID","getNamespace","uri1","uri2","ns","id1","id2","namedNode","decimals","undefined","parseFloat","p1","p2","a","b","c","d","round","Math","sqrt","toString","num","Number","EPSILON","uri","indexOf","split","pop","arr","join"],"mappings":"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","sourcesContent":["import { DataFactory } from \"rdf-data-factory\";\nimport type * as RDF from '@rdfjs/types';\nimport { parseWKT } from \"./wkt-parser\";\n\nconst DF = new DataFactory();\n\nexport const extensionFunctions = {\n    'http://example.org/functions#to-upper-case'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'Literal' && arg.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n            return DF.literal(arg.value.toUpperCase(), arg.datatype);\n        }\n        return arg;\n    },\n    'http://example.org/functions#get-id'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'NamedNode') {\n            return DF.literal(getID(arg));\n        }\n        return arg;\n    },\n    'http://example.org/functions#get-namespace'(args: RDF.Term[]) {\n        const arg = args[0];\n        if (arg.termType === 'NamedNode') {\n            return DF.literal(getNamespace(arg));\n        }\n        return arg;\n    },\n    'http://example.org/functions#uri-concat'(args: RDF.Term[]) {\n        const uri1 = args[0];\n        const uri2 = args[1];\n        if (uri1.termType === 'NamedNode' && uri2.termType === 'NamedNode') {\n              const ns = getNamespace(uri1);\n              const id1 = getID(uri1);\n              const id2 = getID(uri2);\n              return DF.namedNode(ns + id1 + id2);\n        }\n        return DF.literal(\"ERROR\");\n    },\n\n    // GEOJSON\n    // geosf:distance(p1, p2, decimals)\n    'http://www.opengis.net/def/function/geosparql/distance'(args: RDF.Term[]) {\n        const decimals = args[2] != undefined ? parseFloat(args[2].value) : 8;\n        if (args[0].termType === 'Literal' && args[1].termType === 'Literal') {\n            const p1 = parseWKT(args[0].value);\n            const p2 = parseWKT(args[1].value);\n            \n            const a = p1[0] - p2[0];\n            const b = p1[1] - p2[1];\n            const c = p1[2] - p2[2];\n\n            const d: number = round(Math.sqrt(a * a + b * b + c * c), decimals);\n            // if(p1.length == 2 && p2.length == 2){\n\n            // } \n\n            return DF.literal(d.toString(), DF.namedNode('http://www.w3.org/2001/XMLSchema#decimal'));\n        }\n        return DF.literal(\"ERROR\");\n    }\n}\n\nfunction round(num: number, decimals: number = 0): number{\n    return Math.round( num * (10 ** decimals) + Number.EPSILON ) / (10 ** decimals);\n}\n\nfunction getID(uri: RDF.Term){\n    return uri.value.indexOf(\"#\") != -1 ? uri.value.split(\"#\")[1] : uri.value.split(\"/\").pop();\n}\n\nfunction getNamespace(uri: RDF.Term){\n    if(uri.value.indexOf(\"#\") != -1){\n        return uri.value.split(\"#\")[0]+\"#\";\n    }else{\n        const arr = uri.value.split(\"/\");\n        arr.pop();\n        return arr.join(\"/\") + \"/\";\n    }\n}"],"file":"communica-extension-functions.js"}