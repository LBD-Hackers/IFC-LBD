{"version":3,"sources":["../../../src/helpers/communica-extension-functions.ts"],"names":["DF","DataFactory","extensionFunctions","args","arg","termType","datatype","value","literal","toUpperCase","getID","getNamespace","uri1","uri2","ns","id1","id2","namedNode","uri","indexOf","split","pop","arr","join"],"mappings":";;;;;;;AAAA;;AAIA,IAAMA,EAAE,GAAG,IAAIC,2BAAJ,EAAX;AAEO,IAAIC,kBAAkB,GAAG;AAC5B,8CAD4B,8CACiBC,IADjB,EACmC;AAC3D,QAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,SAAjB,IAA8BD,GAAG,CAACE,QAAJ,CAAaC,KAAb,KAAuB,yCAAzD,EAAoG;AAChG,aAAOP,EAAE,CAACQ,OAAH,CAAWJ,GAAG,CAACG,KAAJ,CAAUE,WAAV,EAAX,EAAoCL,GAAG,CAACE,QAAxC,CAAP;AACH;;AACD,WAAOF,GAAP;AACH,GAP2B;AAQ5B,uCAR4B,wCAQUD,IARV,EAQ4B;AACpD,QAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,WAArB,EAAkC;AAC9B,aAAOL,EAAE,CAACQ,OAAH,CAAWE,KAAK,CAACN,GAAD,CAAhB,CAAP;AACH;;AACD,WAAOA,GAAP;AACH,GAd2B;AAe5B,8CAf4B,+CAeiBD,IAfjB,EAemC;AAC3D,QAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAIC,GAAG,CAACC,QAAJ,KAAiB,WAArB,EAAkC;AAC9B,aAAOL,EAAE,CAACQ,OAAH,CAAWG,YAAY,CAACP,GAAD,CAAvB,CAAP;AACH;;AACD,WAAOA,GAAP;AACH,GArB2B;AAsB5B,2CAtB4B,4CAsBcD,IAtBd,EAsBgC;AACxD,QAAMS,IAAI,GAAGT,IAAI,CAAC,CAAD,CAAjB;AACA,QAAMU,IAAI,GAAGV,IAAI,CAAC,CAAD,CAAjB;;AACA,QAAIS,IAAI,CAACP,QAAL,KAAkB,WAAlB,IAAiCQ,IAAI,CAACR,QAAL,KAAkB,WAAvD,EAAoE;AAC9D,UAAMS,EAAE,GAAGH,YAAY,CAACC,IAAD,CAAvB;AACA,UAAMG,GAAG,GAAGL,KAAK,CAACE,IAAD,CAAjB;AACA,UAAMI,GAAG,GAAGN,KAAK,CAACG,IAAD,CAAjB;AACA,aAAOb,EAAE,CAACiB,SAAH,CAAaH,EAAE,GAAGC,GAAL,GAAWC,GAAxB,CAAP;AACL;;AACD,WAAOhB,EAAE,CAACQ,OAAH,CAAW,OAAX,CAAP;AACH;AAhC2B,CAAzB;;;AAmCP,SAASE,KAAT,CAAeQ,GAAf,EAA6B;AACzB,SAAOA,GAAG,CAACX,KAAJ,CAAUY,OAAV,CAAkB,GAAlB,KAA0B,CAAC,CAA3B,GAA+BD,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAA/B,GAAyDF,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAAhE;AACH;;AAED,SAASV,YAAT,CAAsBO,GAAtB,EAAoC;AAChC,MAAGA,GAAG,CAACX,KAAJ,CAAUY,OAAV,CAAkB,GAAlB,KAA0B,CAAC,CAA9B,EAAgC;AAC5B,WAAOD,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,EAAqB,CAArB,IAAwB,GAA/B;AACH,GAFD,MAEK;AACD,QAAME,GAAG,GAAGJ,GAAG,CAACX,KAAJ,CAAUa,KAAV,CAAgB,GAAhB,CAAZ;AACAE,IAAAA,GAAG,CAACD,GAAJ;AACA,WAAOC,GAAG,CAACC,IAAJ,CAAS,GAAT,IAAgB,GAAvB;AACH;AACJ","sourcesContent":["import { DataFactory } from \"rdf-data-factory\";\r\nimport type * as RDF from '@rdfjs/types';\r\nimport { parseWKT } from \"./wkt-parser\";\r\n\r\nconst DF = new DataFactory();\r\n\r\nexport let extensionFunctions = {\r\n    'http://example.org/functions#to-upper-case'(args: RDF.Term[]) {\r\n        const arg = args[0];\r\n        if (arg.termType === 'Literal' && arg.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\r\n            return DF.literal(arg.value.toUpperCase(), arg.datatype);\r\n        }\r\n        return arg;\r\n    },\r\n    'http://example.org/functions#get-id'(args: RDF.Term[]) {\r\n        const arg = args[0];\r\n        if (arg.termType === 'NamedNode') {\r\n            return DF.literal(getID(arg));\r\n        }\r\n        return arg;\r\n    },\r\n    'http://example.org/functions#get-namespace'(args: RDF.Term[]) {\r\n        const arg = args[0];\r\n        if (arg.termType === 'NamedNode') {\r\n            return DF.literal(getNamespace(arg));\r\n        }\r\n        return arg;\r\n    },\r\n    'http://example.org/functions#uri-concat'(args: RDF.Term[]) {\r\n        const uri1 = args[0];\r\n        const uri2 = args[1];\r\n        if (uri1.termType === 'NamedNode' && uri2.termType === 'NamedNode') {\r\n              const ns = getNamespace(uri1);\r\n              const id1 = getID(uri1);\r\n              const id2 = getID(uri2);\r\n              return DF.namedNode(ns + id1 + id2);\r\n        }\r\n        return DF.literal(\"ERROR\");\r\n    }\r\n}\r\n\r\nfunction getID(uri: RDF.Term){\r\n    return uri.value.indexOf(\"#\") != -1 ? uri.value.split(\"#\")[1] : uri.value.split(\"/\").pop();\r\n}\r\n\r\nfunction getNamespace(uri: RDF.Term){\r\n    if(uri.value.indexOf(\"#\") != -1){\r\n        return uri.value.split(\"#\")[0]+\"#\";\r\n    }else{\r\n        const arr = uri.value.split(\"/\");\r\n        arr.pop();\r\n        return arr.join(\"/\") + \"/\";\r\n    }\r\n}"],"file":"communica-extension-functions.js"}