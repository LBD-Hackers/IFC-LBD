{"version":3,"sources":["../../../src/helpers/path-search.ts"],"names":["buildRelOneToOne","ifcAPI","modelID","relationshipType","subjectRef","targetRef","rdfRelationship","includeInterface","biderectional","graph","properties","getAllItemsOfType","rels","i","length","relID","getItemProperties","relProps","Promise","all","value","subject","target","subjectURI","GlobalId","targetURI","interfaceURI","push","expressID","buildRelOneToMany","subjectClassConstraint","targetClassConstraint","type","targetPromises","targets","targetObjects","filter","t","map"],"mappings":"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","sourcesContent":["import * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { defaultURIBuilder } from \"./uri-builder\";\n\nexport async function buildRelOneToOne(ifcAPI: WebIFC.IfcAPI, modelID: number = 0, relationshipType: number, subjectRef: string, targetRef: string, rdfRelationship: string, includeInterface: boolean = false, biderectional: boolean = false): Promise<any>{\n\n    const graph = [];\n\n    const rels = await ifcAPI.properties.getAllItemsOfType(modelID, relationshipType, false);\n\n    for (let i = 0; i < rels.length; i++) {\n\n        const relID = rels[i];\n\n        const relProps = await ifcAPI.properties.getItemProperties(modelID, relID);\n\n        // Only continue if the interface is between an element and a space\n        if(!relProps[subjectRef] || !relProps[targetRef]) { continue; }\n\n        // Get properties of related and relating\n        const [subject, target] = await Promise.all([\n            ifcAPI.properties.getItemProperties(modelID, relProps[subjectRef].value),\n            ifcAPI.properties.getItemProperties(modelID, relProps[targetRef].value)\n        ]);\n\n        const subjectURI = defaultURIBuilder(subject.GlobalId.value);\n        const targetURI = defaultURIBuilder(target.GlobalId.value);\n        const interfaceURI = defaultURIBuilder(relProps.GlobalId.value);\n\n        // Push relationships\n        graph.push({\n            \"@id\": subjectURI,\n            [rdfRelationship]: {\"@id\": targetURI}\n        });\n\n        // Optionally, push it in opposite direction\n        if(biderectional){\n            graph.push({\n                \"@id\": targetURI,\n                [rdfRelationship]: {\"@id\": subjectURI}\n            });\n        }\n\n        // Optionally, also include the interface\n        if(includeInterface){\n            graph.push({\n                \"@id\": interfaceURI,\n                \"@type\": \"bot:Interface\",\n                \"ex:expressID\": relProps.expressID,\n                \"bot:interfaceOf\": [\n                    {\"@id\": subjectURI},\n                    {\"@id\": targetURI}\n                ]\n            });\n        }\n\n    }\n\n    return graph;\n\n}\n\nexport async function buildRelOneToMany(ifcAPI: WebIFC.IfcAPI, modelID: number = 0, relationshipType: number, subjectRef: string, targetRef: string, rdfRelationship: string, subjectClassConstraint?: number, targetClassConstraint?: number): Promise<any>{\n\n    const graph = [];\n\n    const rels = await ifcAPI.properties.getAllItemsOfType(modelID, relationshipType, false);\n\n    for (let i = 0; i < rels.length; i++) {\n\n        const relID = rels[i];\n\n        const relProps = await ifcAPI.properties.getItemProperties(modelID, relID);\n\n        // Only continue if the interface is between an element and a space\n        if(!relProps[subjectRef] || !relProps[targetRef]) { continue; }\n\n        const subject = await ifcAPI.properties.getItemProperties(modelID, relProps[subjectRef].value);\n\n        // It might be that we are only interested in relationship where the subject fulfills the constraint\n        if(subjectClassConstraint && subject.type != subjectClassConstraint) { continue; }\n\n        const targetPromises: any = [];\n        for (let i = 0; i < relProps[targetRef].length; i++) {\n            targetPromises.push(ifcAPI.properties.getItemProperties(modelID, relProps[targetRef][i].value));\n        }\n        const targets = await Promise.all(targetPromises);\n\n        const targetObjects = targets\n            .filter((t: any) => {\n                // It might be that we are only interested in relationship where the target fulfills the constraint\n                if(targetClassConstraint && t.type != targetClassConstraint) return false;\n                return true;\n            })\n            .map((t: any) => {\n                const targetURI = defaultURIBuilder(t.GlobalId.value);\n                return {\"@id\": targetURI}\n            });\n\n        // Skip if no target objects\n        if(!targetObjects.length) { continue; }\n\n        const subjectURI = defaultURIBuilder(subject.GlobalId.value);\n\n        // Push relationships\n        graph.push({\n            \"@id\": subjectURI,\n            [rdfRelationship]: targetObjects\n        });\n\n    }\n\n    return graph;\n\n}"],"file":"path-search.js"}