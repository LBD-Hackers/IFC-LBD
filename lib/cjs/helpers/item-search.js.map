{"version":3,"sources":["../../../src/helpers/item-search.ts"],"names":["getAllItemsOfTypeOrSubtype","ifcAPI","modelID","ifcType","subTypes","getItemSubtypes","items","i","length","push","properties","getAllItemsOfType","type","treeNode","searchProductTree","IfcTypesTree","collectAllIds","node","typeID","id","children","result","ids"],"mappings":";;;;;;;;AAEA;;;;;;;;;;;;;;;;;;SAEsBA,0B;;;;;wFAAf,iBAA0CC,MAA1C,EAAiEC,OAAjE,EAAkFC,OAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,QADH,GACwBC,eAAe,CAACF,OAAD,CADvC;AAECG,YAAAA,KAFD,GAEgB,EAFhB;AAGMC,YAAAA,CAHN,GAGU,CAHV;;AAAA;AAAA,kBAGaA,CAAC,GAAGH,QAAQ,CAACI,MAH1B;AAAA;AAAA;AAAA;;AAAA,0BAICF,KAAK,CAACG,IAJP;AAAA,0BAICH,KAJD;AAAA;AAAA;AAAA,mBAIqBL,MAAM,CAACS,UAAP,CAAkBC,iBAAlB,CAAoCT,OAApC,EAA6CE,QAAQ,CAACG,CAAD,CAArD,EAA0D,KAA1D,CAJrB;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGkCA,YAAAA,CAAC,EAHnC;AAAA;AAAA;;AAAA;AAAA,6CAMID,KANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASA,SAASD,eAAT,CAAyBO,IAAzB,EAAgD;AAEnD,MAAIR,QAAkB,GAAG,EAAzB,CAFmD,CAInD;;AACA,MAAMS,QAAQ,GAAGC,iBAAiB,CAACC,0BAAD,EAAeH,IAAf,CAAlC;;AAEA,MAAGC,QAAH,EAAY;AACR;AACAG,IAAAA,aAAa,CAACH,QAAD,EAAWT,QAAX,CAAb;AACH;;AAED,SAAOA,QAAP,CAZmD,CAcnD;;AACA,WAASU,iBAAT,CAA2BG,IAA3B,EAA2CC,MAA3C,EAAyE;AACrE,QAAGD,IAAI,CAACE,EAAL,IAAWD,MAAd,EAAqB;AAChB,aAAOD,IAAP;AACJ,KAFD,MAEM,IAAIA,IAAI,CAACG,QAAL,IAAiB,IAArB,EAA0B;AAC3B,UAAIb,CAAJ;AACA,UAAIc,MAAqB,GAAG,IAA5B;;AACA,WAAId,CAAC,GAAC,CAAN,EAASc,MAAM,IAAI,IAAV,IAAkBd,CAAC,GAAGU,IAAI,CAACG,QAAL,CAAcZ,MAA7C,EAAqDD,CAAC,EAAtD,EAAyD;AACpDc,QAAAA,MAAM,GAAGP,iBAAiB,CAACG,IAAI,CAACG,QAAL,CAAcb,CAAd,CAAD,EAAmBW,MAAnB,CAA1B;AACJ;;AACD,aAAOG,MAAP;AACJ;;AACD,WAAO,IAAP;AACH,GA3BkD,CA6BnD;;;AACA,WAASL,aAAT,CAAuBC,IAAvB,EAA0D;AAAA,QAAnBK,GAAmB,uEAAH,EAAG;AACtDA,IAAAA,GAAG,CAACb,IAAJ,CAASQ,IAAI,CAACE,EAAd;;AACA,QAAGF,IAAI,CAACG,QAAR,EAAiB;AACb,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,IAAI,CAACG,QAAL,CAAcZ,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CS,QAAAA,aAAa,CAACC,IAAI,CAACG,QAAL,CAAcb,CAAd,CAAD,EAAmBe,GAAnB,CAAb;AACH;AACJ;AACJ;AAEJ","sourcesContent":["import * as WebIFC from \"web-ifc/web-ifc-api.js\";\r\nimport { TreeNode } from \"./BaseDefinitions\";\r\nimport { IfcTypesTree } from \"./IfcTypesTree\";\r\n\r\nexport async function getAllItemsOfTypeOrSubtype(ifcAPI: WebIFC.IfcAPI, modelID: number, ifcType: number): Promise<number[]>{\r\n    const subTypes: number[] = getItemSubtypes(ifcType);\r\n    let items: any[] = [];\r\n    for (let i = 0; i < subTypes.length; i++) {\r\n        items.push(...await ifcAPI.properties.getAllItemsOfType(modelID, subTypes[i], false));\r\n    }\r\n    return items;\r\n}\r\n\r\nexport function getItemSubtypes(type: number): number[]{\r\n\r\n    let subTypes: number[] = [];\r\n\r\n    // Get the tree node that corresponds to the requested type\r\n    const treeNode = searchProductTree(IfcTypesTree, type);\r\n\r\n    if(treeNode){\r\n        // Get all typeIds for the node itself and its subtypes\r\n        collectAllIds(treeNode, subTypes);\r\n    }\r\n\r\n    return subTypes;\r\n\r\n    // Search IfcProductTree for the particular typeID and get the node\r\n    function searchProductTree(node: TreeNode, typeID: number): TreeNode|null{\r\n        if(node.id == typeID){\r\n             return node;\r\n        }else if (node.children != null){\r\n             var i;\r\n             var result: TreeNode|null = null;\r\n             for(i=0; result == null && i < node.children.length; i++){\r\n                  result = searchProductTree(node.children[i], typeID);\r\n             }\r\n             return result;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Collect all ids of tree node and its children\r\n    function collectAllIds(node: TreeNode, ids: number[] = []){\r\n        ids.push(node.id);\r\n        if(node.children){\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                collectAllIds(node.children[i], ids);\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"file":"item-search.js"}