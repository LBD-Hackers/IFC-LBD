{"version":3,"sources":["../../../src/parsers/fso-parser.ts"],"names":["typeMappings","FSOParser","verbose","console","log","time","jsonLDObject","push","classify","timeEnd","getPortIDs","portIDs","portPort","portComponent","portFlowDirection","portPlacements","loadInStore","componentConections","connectionInterfaces","segmentLengths","getTripleCount","tripleCount","getTriples","graph","typeIDs","Object","keys","i","length","typeID","fsoClass","ifcAPI","modelID","IFCRELCONNECTSPORTS","subjectRef","targetRef","rdfRelationship","IFCRELCONNECTSPORTTOELEMENT","r1","r2","concat","expressIDArray","expressID","properties","getItemProperties","props","flowDirection","FlowDirection","value","portType","GlobalId","ObjectPlacement","coordinates","point","portURI","cpURI","query","executeUpdateQuery","executeSelectQuery","IFCPORT","subTypes","typeId","getAllItemsOfType","Parser"],"mappings":"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","sourcesContent":["import {\n    IFCELEMENT,\n    IFCOPENINGELEMENT\n} from 'web-ifc';\n\nimport { buildClassInstances, getElementSubtypes } from \"../helpers/class-assignment\";\nimport { Parser } from \"./parser\";\nimport { JSONLD } from \"../helpers/BaseDefinitions\";\nimport { defaultURIBuilder } from \"../helpers/uri-builder\";\nimport { IfcElements } from \"../helpers/IfcElementsMap\";\nimport { buildRelOneToOne } from '../helpers/path-search';\nimport { getGlobalPosition, getGlobalRotation } from '../helpers/object-placement';\nimport * as N3 from 'n3';\n\nconst typeMappings: {[key: number]: string[]}  = {\n    3205830791: [\"fso:DistributionSystem\"],\n    3740093272: [\"fso:Port\"],\n    987401354: [\"fso:Segment\", \"fso:Component\"],\n    4278956645: [\"fso:Fitting\", \"fso:Component\"],\n    2058353004: [\"fso:FlowController\", \"fso:Component\"],\n    1658829314: [\"fso:EnergyConversionDevice\", \"fso:Component\"],\n    3132237377: [\"fso:FlowMovingDevice\", \"fso:Component\"],\n    707683696: [\"fso:StorageDevice\", \"fso:Component\"],\n    2223149337: [\"fso:Terminal\", \"fso:Component\"],\n    3508470533: [\"fso:TreatmentDevice\", \"fso:Component\"],\n}\n\nexport class FSOParser extends Parser{\n\n    public async doParse(): Promise<JSONLD|string>{\n\n        this.verbose && console.log(\"Started FSO parsing\");\n        this.verbose && console.log(\"\");\n        console.time(\"Finished FSO parsing\");\n\n        this.verbose && console.log(\"## STEP 1: CLASS ASSIGNMENT ##\");\n        this.verbose && console.time(\"1/9: Classifying FSO items\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.classify()));\n        this.verbose && console.timeEnd(\"1/9: Classifying FSO items\");\n        this.verbose && console.log(\"\");\n\n        this.verbose && console.log(\"## STEP 2: PORTS ##\");\n        const portIDs = await this.getPortIDs();\n        this.verbose && console.time(\"2/9: Finding port-port connections\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPort()));\n        this.verbose && console.timeEnd(\"2/9: Finding port-port connections\");\n        this.verbose && console.time(\"3/9: Finding port-component connections\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portComponent()));\n        this.verbose && console.timeEnd(\"3/9: Finding port-component connections\");\n        this.verbose && console.time(\"4/9: Finding port flow directions\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portFlowDirection(portIDs)));\n        this.verbose && console.timeEnd(\"4/9: Finding port flow directions\");\n        this.verbose && console.time(\"5/9: Finding port placements\");\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPlacements(portIDs)));\n        this.verbose && console.timeEnd(\"5/9: Finding port placements\");\n        this.verbose && console.log(\"\");\n\n        // NB! The following steps require an in-memory triplestore to run which is slower than just operating the JSON-LD object\n        this.verbose && console.log(\"## STEP 3: POST PROCESSING ##\");\n        this.verbose && console.time(\"6/9: Loading data into in-memory triplestore for querying\");\n        await this.loadInStore();\n        this.verbose && console.timeEnd(\"6/9: Loading data into in-memory triplestore for querying\");\n        this.verbose && console.time(\"7/9: Deducing element conections from ports\");\n        await this.componentConections();\n        this.verbose && console.timeEnd(\"7/9: Deducing element conections from ports\");\n        this.verbose && console.time(\"8/9: Deducing connection interfaces\");\n        await this.connectionInterfaces();\n        this.verbose && console.timeEnd(\"8/9: Deducing connection interfaces\");\n        this.verbose && console.time(\"9/9: Calculating segment lengths\");\n        await this.segmentLengths();\n        this.verbose && console.timeEnd(\"9/9: Calculating segment lengths\");\n\n        console.timeEnd(\"Finished FSO parsing\");\n\n        if(this.verbose){\n            const tripleCount = await this.getTripleCount();\n            console.log(\"Total triples: \" + tripleCount);\n        }\n\n        return await this.getTriples();\n\n    }\n\n    /**\n     * CLASS ASSIGNMENT\n     */\n    private async classify(): Promise<any[]>{\n\n        const graph = [];\n\n        const typeIDs = Object.keys(typeMappings);\n        for (let i = 0; i < typeIDs.length; i++) {\n            const typeID: any = typeIDs[i];\n            const fsoClass = typeMappings[typeID];\n            graph.push(...(await buildClassInstances(this.ifcAPI, this.modelID, typeID, fsoClass, true)));\n        }\n\n        return graph;\n\n    }\n\n    /**\n     * RELATIONSHIP ASSIGNMENT\n     */\n\n    // <port1> fso:connectedPort <port2>\n    // <port2> fso:connectedPort <port1>\n    private async portPort(): Promise<any[]>{\n\n        const IFCRELCONNECTSPORTS = 3190031847;\n        const subjectRef = \"RelatedPort\";\n        const targetRef = \"RelatingPort\";\n        const rdfRelationship = \"fso:connectedPort\";\n        return await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTS, subjectRef, targetRef, rdfRelationship, false, true);\n\n    }\n\n    // <element> fso:connectedPort <port>\n    // <port> fso:connectedElement <element>\n    private async portComponent(): Promise<any[]>{\n\n        const IFCRELCONNECTSPORTTOELEMENT = 4201705270;\n        let subjectRef = \"RelatedElement\";\n        let targetRef = \"RelatingPort\";\n        let rdfRelationship = \"fso:connectedPort\";\n        const r1 = await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTTOELEMENT, subjectRef, targetRef, rdfRelationship);\n\n        subjectRef = \"RelatingPort\";\n        targetRef = \"RelatedElement\";\n        rdfRelationship = \"fso:connectedComponent\";\n        const r2 = await buildRelOneToOne(this.ifcAPI, this.modelID, IFCRELCONNECTSPORTTOELEMENT, subjectRef, targetRef, rdfRelationship);\n\n        return r1.concat(r2);\n    }\n\n    /**\n     * PROPERTIES\n     */\n\n    // <port> a fso:InPort .\n    // <port> a fso:OutPort .\n    // <port> a fso:BidirectionalPort .\n    private async portFlowDirection(expressIDArray: number[]): Promise<any[]>{\n        \n        // Port property example\n        // Description: {type: 1, value: 'Flow'}\n        // FlowDirection: {type: 3, value: 'SINK'}\n        // GlobalId: {type: 1, value: '1noFI6neD67vh$xlz57Jcc'}\n        // Name: {type: 1, value: 'InPort_1614379'}\n        // ObjectPlacement: IfcLocalPlacement {expressID: 27954, type: 2624227202, PlacementRelTo: IfcLocalPlacement, RelativePlacement: IfcAxis2Placement3D}\n        // ObjectType: null\n        // OwnerHistory: IfcOwnerHistory {expressID: 42, type: 1207048766, OwningUser: IfcPersonAndOrganization, OwningApplication: IfcApplication, State: null, …}\n        // PredefinedType: undefined\n        // Representation: null\n        // SystemType: undefined\n        // expressID: 27956\n        // type: 3041715199\n        const graph = [];\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID);\n\n            const flowDirection = props.FlowDirection.value;\n            let portType = \"\";\n            if(flowDirection == \"SINK\") portType = \"fso:InPort\";\n            if(flowDirection == \"SOURCE\") portType = \"fso:OutPort\";\n            if(flowDirection == \"SOURCEANDSINK\") portType = \"fso:BidirectionalPort\";\n\n            if(portType != \"\"){\n                graph.push({\n                    \"@id\": defaultURIBuilder(props.GlobalId.value),\n                    \"@type\": portType\n                });\n            }\n\n        }\n\n        return graph;\n\n    }\n\n    private async portPlacements(expressIDArray: number[]): Promise<any[]>{\n        \n        const graph: any[] = [];\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID, true);\n\n            const coordinates = await getGlobalPosition(props.ObjectPlacement);\n            const point = `POINT Z(${coordinates[0]} ${coordinates[1]} ${coordinates[2]})`;\n\n            const portURI = defaultURIBuilder(props.GlobalId.value);\n            const cpURI = portURI + \"_cp\";\n\n            graph.push({\n                \"@id\": portURI,\n                \"omg:hasGeometry\": {\n                    \"@id\": cpURI,\n                    \"@type\": [\"omg:Geometry\", \"ex:CenterPoint\"],\n                    \"fog::asSfa_v2-wkt\": point\n                }\n            });\n\n        }\n\n        return graph;\n\n    }\n\n    /**\n     * POST PROCESSING\n     */\n    private async componentConections(): Promise<void>{\n        const query = `PREFIX fso: <https://w3id.org/fso#>\n                    INSERT{\n                        ?e1 fso:connectedWith ?e2 .\n                        ?e2 fso:connectedWith ?e1 .\n                        ?e1 fso:feedsFluidTo ?e2 .\n                        ?e2 fso:hasFluidFedBy ?e1\n                    }\n                    WHERE{\n                        ?e1 fso:connectedPort ?p1 .\n                        ?p1 fso:connectedPort ?p2 .\n                        ?p2 fso:connectedComponent ?e2 .\n                        ?p1 a fso:OutPort .\n                        ?p2 a fso:InPort .\n                    }`;\n        await this.executeUpdateQuery(query);\n    }\n\n    private async connectionInterfaces(): Promise<void>{\n        const query = `PREFIX fso: <https://w3id.org/fso#>\n            PREFIX func: <http://example.org/functions#>\n            INSERT{\n                ?uri a fso:ConnectionPoint ;\n                    fso:connectsFrom ?e1 ;\n                    fso:connectsTo ?e2\n            }\n            WHERE{\n                ?e1 fso:connectedPort ?p1 .\n                ?p1 fso:connectedPort ?p2 .\n                ?p2 fso:connectedComponent ?e2 .\n                ?p1 a fso:OutPort .\n                ?p2 a fso:InPort .\n                BIND(func:uri-concat(?e1, ?e1) AS ?uri)\n            }`;\n        await this.executeUpdateQuery(query);\n    }\n\n    private async segmentLengths(): Promise<void>{\n        const query = `PREFIX geosf: <http://www.opengis.net/def/function/geosparql/>\n        SELECT *\n        WHERE{\n            BIND(\"POINT Z(0 0 0)\" AS ?p1)\n            BIND(\"POINT Z(0 1 1)\" AS ?p2)\n            BIND(geosf:distance(?p1, ?p1) AS ?d)\n        }`;\n        await this.executeSelectQuery(query);\n    }\n\n    private async getPortIDs(): Promise<number[]>{\n\n        // Get all subTypes of IfcPort\n        const IFCPORT = 3740093272;\n        const subTypes = getElementSubtypes(IFCPORT);\n\n        // Get all items in model that belong to any of these types\n        let expressIDArray: number[] = [];\n        for(let typeId of subTypes){\n            expressIDArray.push(...await this.ifcAPI.properties.getAllItemsOfType(this.modelID, typeId, false));\n        }\n        return expressIDArray;\n    }\n\n    \n\n}"],"file":"fso-parser.js"}