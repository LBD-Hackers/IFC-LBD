{"version":3,"sources":["../../../src/parsers/fso-parser.ts"],"names":["typeMappings","FSOParser","verbose","console","log","time","jsonLDObject","push","classify","timeEnd","ifcAPI","modelID","IFCPORT","portIDs","portPort","portComponent","portFlowDirection","portPlacements","systemComponent","loadInStore","componentConections","connectionInterfaces","segmentLengths","getTripleCount","tripleCount","getTriples","graph","typeIDs","Object","keys","i","length","typeID","fsoClass","input","ifcRelationship","IFCRELCONNECTSPORTS","ifcSubjectRel","ifcTargetRel","rdfRelationship","includeInterface","oppoiteRelationship","inputA","IFCRELCONNECTSPORTTOELEMENT","inputB","IFCRELNESTS","IFCRELASSIGNSTOGROUP","ifcSubjectClassIn","IFCSYSTEM","IFCDISTRIBUTIONSYSTEM","expressIDArray","expressID","properties","getItemProperties","props","flowDirection","FlowDirection","value","portType","GlobalId","ObjectPlacement","coordinates","point","portURI","cpURI","query","executeUpdateQuery","Parser"],"mappings":"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","sourcesContent":["import { buildClassInstances } from \"../helpers/class-assignment\";\r\nimport { Parser } from \"./parser\";\r\nimport { JSONLD } from \"../helpers/BaseDefinitions\";\r\nimport { defaultURIBuilder } from \"../helpers/uri-builder\";\r\nimport { buildRelOneToMany, buildRelOneToOne, Input } from '../helpers/path-search';\r\nimport { getGlobalPosition } from '../helpers/object-placement';\r\nimport { IFCDISTRIBUTIONSYSTEM, IFCPORT, IFCRELASSIGNSTOGROUP, IFCRELCONNECTSPORTS, IFCRELCONNECTSPORTTOELEMENT, IFCRELNESTS, IFCSYSTEM } from \"web-ifc\";\r\nimport { getAllItemsOfTypeOrSubtype } from \"../helpers/item-search\";\r\n\r\nconst typeMappings: {[key: number]: string[]}  = {\r\n    2254336722: [\"fso:DistributionSystem\"],\r\n    3740093272: [\"fso:Port\"],\r\n    987401354: [\"fso:Segment\", \"fso:Component\"],\r\n    4278956645: [\"fso:Fitting\", \"fso:Component\"],\r\n    2058353004: [\"fso:FlowController\", \"fso:Component\"],\r\n    1658829314: [\"fso:EnergyConversionDevice\", \"fso:Component\"],\r\n    3132237377: [\"fso:FlowMovingDevice\", \"fso:Component\"],\r\n    707683696: [\"fso:StorageDevice\", \"fso:Component\"],\r\n    2223149337: [\"fso:Terminal\", \"fso:Component\"],\r\n    3508470533: [\"fso:TreatmentDevice\", \"fso:Component\"],\r\n}\r\n\r\nexport class FSOParser extends Parser{\r\n\r\n    public async doParse(): Promise<JSONLD|string>{\r\n\r\n        this.verbose && console.log(\"Started FSO parsing\");\r\n        this.verbose && console.log(\"\");\r\n        console.time(\"Finished FSO parsing\");\r\n\r\n        this.verbose && console.log(\"## STEP 1: CLASS ASSIGNMENT ##\");\r\n        this.verbose && console.time(\"1/10: Classifying FSO items\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.classify()));\r\n        this.verbose && console.timeEnd(\"1/10: Classifying FSO items\");\r\n        this.verbose && console.log(\"\");\r\n\r\n        this.verbose && console.log(\"## STEP 2: PORTS ##\");\r\n        const portIDs = await getAllItemsOfTypeOrSubtype(this.ifcAPI, this.modelID, IFCPORT);\r\n        this.verbose && console.time(\"2/10: Finding port-port connections\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPort()));\r\n        this.verbose && console.timeEnd(\"2/10: Finding port-port connections\");\r\n        this.verbose && console.time(\"3/10: Finding port-component connections\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.portComponent()));\r\n        this.verbose && console.timeEnd(\"3/10: Finding port-component connections\");\r\n        this.verbose && console.time(\"4/10: Finding port flow directions\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.portFlowDirection(portIDs)));\r\n        this.verbose && console.timeEnd(\"4/10: Finding port flow directions\");\r\n        this.verbose && console.time(\"5/10: Finding port placements\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.portPlacements(portIDs)));\r\n        this.verbose && console.timeEnd(\"5/10: Finding port placements\");\r\n        this.verbose && console.log(\"\");\r\n\r\n        this.verbose && console.log(\"## STEP 3: SYSTEMS ##\");\r\n        this.verbose && console.time(\"6/10: Finding system-component relationships\");\r\n        this.jsonLDObject[\"@graph\"].push(...(await this.systemComponent()));\r\n        this.verbose && console.timeEnd(\"6/10: Finding system-component relationships\");\r\n        this.verbose && console.log(\"\");\r\n\r\n\r\n        this.verbose && console.log(\"## STEP 4: POST PROCESSING ##\");\r\n        this.verbose && console.time(\"7/10: Loading data into in-memory triplestore for querying\");\r\n        await this.loadInStore();\r\n        this.verbose && console.timeEnd(\"7/10: Loading data into in-memory triplestore for querying\");\r\n        this.verbose && console.time(\"8/10: Deducing element conections from ports\");\r\n        await this.componentConections();\r\n        this.verbose && console.timeEnd(\"8/10: Deducing element conections from ports\");\r\n        this.verbose && console.time(\"9/10: Deducing connection interfaces\");\r\n        await this.connectionInterfaces();\r\n        this.verbose && console.timeEnd(\"9/10: Deducing connection interfaces\");\r\n        this.verbose && console.time(\"10/10: Calculating segment lengths\");\r\n        await this.segmentLengths();\r\n        this.verbose && console.timeEnd(\"10/10: Calculating segment lengths\");\r\n\r\n        console.timeEnd(\"Finished FSO parsing\");\r\n\r\n        if(this.verbose){\r\n            const tripleCount = await this.getTripleCount();\r\n            console.log(\"Total triples: \" + tripleCount);\r\n        }\r\n\r\n        return await this.getTriples();\r\n\r\n    }\r\n\r\n    /**\r\n     * CLASS ASSIGNMENT\r\n     */\r\n    private async classify(): Promise<any[]>{\r\n\r\n        const graph = [];\r\n\r\n        const typeIDs = Object.keys(typeMappings);\r\n        for (let i = 0; i < typeIDs.length; i++) {\r\n            const typeID: any = typeIDs[i];\r\n            const fsoClass = typeMappings[typeID];\r\n            graph.push(...(await buildClassInstances(this.ifcAPI, this.modelID, typeID, fsoClass, true)));\r\n        }\r\n\r\n        return graph;\r\n\r\n    }\r\n\r\n    /**\r\n     * RELATIONSHIP ASSIGNMENT\r\n     */\r\n\r\n    // <port1> fso:connectedPort <port2>\r\n    // <port2> fso:connectedPort <port1>\r\n    private async portPort(): Promise<any[]>{\r\n\r\n        const input: Input = {\r\n            ifcAPI: this.ifcAPI,\r\n            modelID: this.modelID,\r\n            ifcRelationship: IFCRELCONNECTSPORTS,\r\n            ifcSubjectRel: \"RelatedPort\",\r\n            ifcTargetRel: \"RelatingPort\",\r\n            rdfRelationship: \"fso:connectedPort\",\r\n            includeInterface: false,\r\n            oppoiteRelationship: \"fso:connectedPort\"\r\n        }\r\n\r\n        return await buildRelOneToOne(input);\r\n\r\n    }\r\n\r\n    // <element> fso:connectedPort <port>\r\n    // <port> fso:connectedElement <element>\r\n    private async portComponent(): Promise<any[]>{\r\n\r\n        let graph = [];\r\n\r\n        // UNTIL IFC 4, THE RELATIONSHIP IS EXPRESSED WITH IFCRELCONNECTSPORTTOELEMENT\r\n        const inputA: Input = {\r\n            ifcAPI: this.ifcAPI,\r\n            modelID: this.modelID,\r\n            ifcRelationship: IFCRELCONNECTSPORTTOELEMENT,\r\n            ifcSubjectRel: \"RelatedElement\",\r\n            ifcTargetRel: \"RelatingPort\",\r\n            rdfRelationship: \"fso:connectedPort\",\r\n            includeInterface: false,\r\n            oppoiteRelationship: \"fso:connectedComponent\"\r\n        }\r\n\r\n        graph.push(...(await buildRelOneToOne(inputA)));\r\n\r\n        // AFTER IFC 4, THE RELATIONSHIP IS EXPRESSED WITH IFCRELNESTS\r\n        // IFCRELNESTS has a \r\n        const inputB: Input = {\r\n            ifcAPI: this.ifcAPI,\r\n            modelID: this.modelID,\r\n            ifcRelationship: IFCRELNESTS,\r\n            ifcSubjectRel: \"RelatingObject\",\r\n            ifcTargetRel: \"RelatedObjects\",\r\n            rdfRelationship: \"fso:connectedPort\",\r\n            includeInterface: false,\r\n            oppoiteRelationship: \"fso:connectedComponent\"\r\n        }\r\n\r\n        graph.push(...(await buildRelOneToMany(inputB)));\r\n\r\n        return graph;\r\n    }\r\n\r\n    // <system> fso:hasComponent <element>\r\n    private async systemComponent(): Promise<any[]>{\r\n\r\n        const input: Input = {\r\n            ifcAPI: this.ifcAPI,\r\n            modelID: this.modelID,\r\n            ifcRelationship: IFCRELASSIGNSTOGROUP,\r\n            ifcSubjectRel: \"RelatingGroup\",\r\n            ifcTargetRel: \"RelatedObjects\",\r\n            rdfRelationship: \"fso:hasComponent\",\r\n            ifcSubjectClassIn: [IFCSYSTEM, IFCDISTRIBUTIONSYSTEM]\r\n        }\r\n\r\n        return await buildRelOneToMany(input);\r\n\r\n    }\r\n\r\n    /**\r\n     * PROPERTIES\r\n     */\r\n\r\n    // <port> a fso:InPort .\r\n    // <port> a fso:OutPort .\r\n    // <port> a fso:BidirectionalPort .\r\n    private async portFlowDirection(expressIDArray: number[]): Promise<any[]>{\r\n        \r\n        // Port property example\r\n        // Description: {type: 1, value: 'Flow'}\r\n        // FlowDirection: {type: 3, value: 'SINK'}\r\n        // GlobalId: {type: 1, value: '1noFI6neD67vh$xlz57Jcc'}\r\n        // Name: {type: 1, value: 'InPort_1614379'}\r\n        // ObjectPlacement: IfcLocalPlacement {expressID: 27954, type: 2624227202, PlacementRelTo: IfcLocalPlacement, RelativePlacement: IfcAxis2Placement3D}\r\n        // ObjectType: null\r\n        // OwnerHistory: IfcOwnerHistory {expressID: 42, type: 1207048766, OwningUser: IfcPersonAndOrganization, OwningApplication: IfcApplication, State: null, …}\r\n        // PredefinedType: undefined\r\n        // Representation: null\r\n        // SystemType: undefined\r\n        // expressID: 27956\r\n        // type: 3041715199\r\n        const graph = [];\r\n        for (let i = 0; i < expressIDArray.length; i++) {\r\n            const expressID = expressIDArray[i];\r\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID);\r\n\r\n            const flowDirection = props.FlowDirection.value;\r\n            let portType = \"\";\r\n            if(flowDirection == \"SINK\") portType = \"fso:InPort\";\r\n            if(flowDirection == \"SOURCE\") portType = \"fso:OutPort\";\r\n            if(flowDirection == \"SOURCEANDSINK\") portType = \"fso:BidirectionalPort\";\r\n\r\n            if(portType != \"\"){\r\n                graph.push({\r\n                    \"@id\": defaultURIBuilder(props.GlobalId.value),\r\n                    \"@type\": portType\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        return graph;\r\n\r\n    }\r\n\r\n    private async portPlacements(expressIDArray: number[]): Promise<any[]>{\r\n        \r\n        const graph: any[] = [];\r\n        for (let i = 0; i < expressIDArray.length; i++) {\r\n            const expressID = expressIDArray[i];\r\n            const props = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID, true);\r\n\r\n            const coordinates = await getGlobalPosition(props.ObjectPlacement);\r\n            const point = `POINT Z(${coordinates[0]} ${coordinates[1]} ${coordinates[2]})`;\r\n\r\n            const portURI = defaultURIBuilder(props.GlobalId.value);\r\n            const cpURI = portURI + \"_cp\";\r\n\r\n            graph.push({\r\n                \"@id\": portURI,\r\n                \"omg:hasGeometry\": {\r\n                    \"@id\": cpURI,\r\n                    \"@type\": [\"omg:Geometry\", \"ex:CenterPoint\"],\r\n                    \"fog::asSfa_v2-wkt\": point\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return graph;\r\n\r\n    }\r\n\r\n    /**\r\n     * POST PROCESSING\r\n     */\r\n    private async componentConections(): Promise<void>{\r\n        const query = `PREFIX fso: <https://w3id.org/fso#>\r\n                    INSERT{\r\n                        ?e1 fso:connectedWith ?e2 .\r\n                        ?e2 fso:connectedWith ?e1 .\r\n                        ?e1 fso:feedsFluidTo ?e2 .\r\n                        ?e2 fso:hasFluidFedBy ?e1\r\n                    }\r\n                    WHERE{\r\n                        ?e1 fso:connectedPort ?p1 .\r\n                        ?p1 fso:connectedPort ?p2 .\r\n                        ?p2 fso:connectedComponent ?e2 .\r\n                        ?p1 a fso:OutPort .\r\n                        ?p2 a fso:InPort .\r\n                    }`;\r\n        await this.executeUpdateQuery(query);\r\n    }\r\n\r\n    private async connectionInterfaces(): Promise<void>{\r\n        const query = `PREFIX fso: <https://w3id.org/fso#>\r\n            PREFIX func: <http://example.org/functions#>\r\n            INSERT{\r\n                ?uri a fso:ConnectionPoint ;\r\n                    fso:connectsFrom ?e1 ;\r\n                    fso:connectsTo ?e2\r\n            }\r\n            WHERE{\r\n                ?e1 fso:connectedPort ?p1 .\r\n                ?p1 fso:connectedPort ?p2 .\r\n                ?p2 fso:connectedComponent ?e2 .\r\n                ?p1 a fso:OutPort .\r\n                ?p2 a fso:InPort .\r\n                BIND(func:uri-concat(?e1, ?e1) AS ?uri)\r\n            }`;\r\n        await this.executeUpdateQuery(query);\r\n    }\r\n\r\n    // NB! pretty slow, so probably better to just get them from the IFC directly\r\n    private async segmentLengths(): Promise<void>{\r\n        const query = `PREFIX fso: <https://w3id.org/fso#>\r\n        PREFIX omg: <https://w3id.org/omg#>\r\n        PREFIX fog: <https://w3id.org/fog#>\r\n        PREFIX ex:  <https://example.com/>\r\n        PREFIX geosf: <http://www.opengis.net/def/function/geosparql/>\r\n        INSERT{\r\n            ?seg ex:length ?d\r\n        }\r\n        WHERE{\r\n            ?seg a fso:Segment ;\r\n                fso:connectedPort ?port1 , ?port2 .\r\n            FILTER(?port1 != ?port2)\r\n            ?port1 omg:hasGeometry/fog::asSfa_v2-wkt ?p1 .\r\n            ?port2 omg:hasGeometry/fog::asSfa_v2-wkt ?p2 .\r\n            BIND(geosf:distance(?p1, ?p2, 3) AS ?d)\r\n        }`;\r\n        await this.executeUpdateQuery(query);\r\n    }    \r\n\r\n}"],"file":"fso-parser.js"}