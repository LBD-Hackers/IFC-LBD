{"version":3,"sources":["../../../src/parsers/parser.ts"],"names":["Parser","ifcAPI","modelID","format","SerializationFormat","JSONLD","verbose","getJSONLD","NQuads","getNQuads","jsonLDObject","rdf","tripleCount","length"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;IAEaA,M;AAiBT,kBAAYC,MAAZ,EAAmCC,OAAnC,EAAuI;AAAA,QAAnFC,MAAmF,uEAArDC,qCAAoBC,MAAiC;AAAA,QAAzBC,OAAyB,uEAAN,KAAM;;AAAA;;AAAA,0CAfzG;AAAC,kBAAY;AACvC,eAAO,uBADgC;AAEvC,eAAO,uBAFgC;AAGvC,eAAO,uBAHgC;AAIvC,eAAO,uBAJgC;AAKvC,cAAM,sBALiC;AAMvC,eAAO,kDANgC;AAOvC,gBAAQ;AAP+B,OAAb;AAQ3B,gBAAU;AARiB,KAeyG;;AACnI,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKK,OAAL,GAAeA,OAAf;AACA,SAAKH,MAAL,GAAcA,MAAd;AACH;;;;;gFAED;AAAA;AAAA;AAAA;AAAA;AAAA,sBACO,KAAKA,MAAL,IAAeC,qCAAoBC,MAD1C;AAAA;AAAA;AAAA;;AAAA,iDACyD,KAAKE,SAAL,EADzD;;AAAA;AAAA,sBAEO,KAAKJ,MAAL,IAAeC,qCAAoBI,MAF1C;AAAA;AAAA;AAAA;;AAAA,iDAEyD,KAAKC,SAAL,EAFzD;;AAAA;AAAA,iDAGW,EAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC2B,mBAAM,KAAKC,YAAX,CAD3B;;AAAA;AACUC,gBAAAA,GADV;AAEUC,gBAAAA,WAFV,GAEwBD,GAAG,CAACE,MAF5B;AAAA,kDAGWD,WAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAMA,qBAA2B;AACvB,aAAO,KAAKF,YAAZ;AACH;;;;+EAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiB,mBAAM,KAAKA,YAAX,EAAyB;AAACP,kBAAAA,MAAM,EAAE;AAAT,iBAAzB,CADjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import { JSONLD, SerializationFormat } from \"../helpers/BaseDefinitions\";\nimport * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { toRDF } from \"jsonld\";\n\nexport class Parser{\n\n    public jsonLDObject: JSONLD = {\"@context\": {\n        \"bot\": \"https://w3id.org/bot#\",\n        \"fso\": \"https://w3id.org/fso#\",\n        \"omg\": \"https://w3id.org/omg#\",\n        \"fog\": \"https://w3id.org/fog#\",\n        \"ex\": \"https://example.com/\",\n        \"ifc\": \"http://ifcowl.openbimstandards.org/IFC2X3_Final#\",\n        \"inst\": \"https://example.com/\"\n    }, \"@graph\": []};\n\n    public modelID: number;\n    public ifcAPI: WebIFC.IfcAPI;\n    public verbose: boolean;\n    public format: SerializationFormat;\n\n    constructor(ifcAPI: WebIFC.IfcAPI, modelID: number, format: SerializationFormat = SerializationFormat.JSONLD, verbose: boolean = false){\n        this.modelID = modelID;\n        this.ifcAPI = ifcAPI;\n        this.verbose = verbose;\n        this.format = format;\n    }\n\n    public async getTriples(): Promise<JSONLD|string>{\n        if(this.format == SerializationFormat.JSONLD) return this.getJSONLD();\n        if(this.format == SerializationFormat.NQuads) return this.getNQuads();\n        return \"\";\n    }\n\n    public async getTripleCount(): Promise<number>{\n        const rdf: any = await toRDF(this.jsonLDObject);\n        const tripleCount = rdf.length;\n        return tripleCount;\n    }\n\n    private getJSONLD(): JSONLD{\n        return this.jsonLDObject;\n    }\n\n    private async getNQuads(): Promise<any>{\n        return await toRDF(this.jsonLDObject, {format: 'application/n-quads'});\n    }\n\n}"],"file":"parser.js"}