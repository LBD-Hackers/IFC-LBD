{"version":3,"sources":["../../../src/parsers/parser.ts"],"names":["Parser","ifcAPI","modelID","format","SerializationFormat","JSONLD","verbose","prefixes","N3","Store","getJSONLD","NQuads","getNQuads","jsonLDObject","rdf","tripleCount","length","quads","store","addQuads","query","engine","sources","extensionFunctions","result","updateResult","resultToString","data","pipe","process","stdout","size","nquads","getQuads","doc","compacted","N3Format","Turtle","Promise","resolve","reject","writer","Writer","i","addQuad","end","error"],"mappings":"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","sourcesContent":["import { JSONLD, N3Format, SerializationFormat } from \"../helpers/BaseDefinitions\";\nimport * as WebIFC from \"web-ifc/web-ifc-api.js\";\nimport { prefixes } from '../helpers/prefixes';\nimport { extensionFunctions } from '../helpers/communica-extension-functions';\nimport { toRDF, fromRDF, compact } from \"jsonld\";\nimport * as N3 from 'n3';\nimport { newEngine } from '@comunica/actor-init-sparql-rdfjs';\n\nexport class Parser{\n\n    public jsonLDObject: JSONLD = {\"@context\": prefixes, \"@graph\": []};\n\n    public modelID: number;\n    public ifcAPI: WebIFC.IfcAPI;\n    public verbose: boolean;\n    public format: SerializationFormat;\n    public communicaEngine = newEngine();\n    public store: N3.Store = new N3.Store();\n\n    constructor(ifcAPI: WebIFC.IfcAPI, modelID: number, format: SerializationFormat = SerializationFormat.JSONLD, verbose: boolean = false){\n        this.modelID = modelID;\n        this.ifcAPI = ifcAPI;\n        this.verbose = verbose;\n        this.format = format;\n    }\n\n    public async getTriples(): Promise<JSONLD|string>{\n        if(this.format == SerializationFormat.JSONLD) return this.getJSONLD();\n        if(this.format == SerializationFormat.NQuads) return this.getNQuads();\n        return \"\";\n    }\n\n    public async getTripleCount(): Promise<number>{\n        const rdf: any = await toRDF(this.jsonLDObject);\n        const tripleCount = rdf.length;\n        return tripleCount;\n    }\n\n    public async loadInStore(): Promise<void>{\n        const quads: any = await toRDF(this.jsonLDObject);\n        await this.store.addQuads(quads);\n    }\n\n    public async executeUpdateQuery(query: string): Promise<void>{\n        // Initiate the update\n        const engine = newEngine();\n        const result: any = await engine.query(query, {\n            sources: [this.store],\n            extensionFunctions\n        });\n        \n        // Wait for the update to complete\n        await result.updateResult;\n    }\n\n    public async executeSelectQuery(query: string): Promise<void>{\n        // Initiate the update\n        const engine = newEngine();\n        const result: any = await engine.query(query, {\n            sources: [this.store],\n            extensionFunctions\n        });\n        \n        const { data } = await engine.resultToString(result,\n            'application/sparql-results+json');\n        data.pipe(process.stdout); // Print to standard output\n    }\n\n    public getStoreSize(): number{\n        return this.store.size;\n    }\n\n    private async getJSONLD(): Promise<JSONLD>{\n        // If store is up, serialize the content of the store\n        if(this.store.size > 0){\n            const nquads = this.store.getQuads(null, null, null, null);\n            const doc = await fromRDF(nquads);\n            const compacted = await compact(doc, this.jsonLDObject[\"@context\"]);\n            return compacted as JSONLD;\n        }\n        // If not, simply return the JSON-LD object\n        return this.jsonLDObject;\n    }\n\n    private async getNQuads(): Promise<any>{\n        // If store is up, serialize the content of the store\n        if(this.store.size > 0){\n\n        }\n        // If not, simply convert the JSON-LD object\n        return await toRDF(this.jsonLDObject, {format: 'application/n-quads'});\n    }\n\n    private async serializeStoreContent(format: N3Format = N3Format.Turtle): Promise<string>{\n\n        return new Promise((resolve, reject) => {\n\n            const writer = new N3.Writer({ prefixes: prefixes, format });\n            const quads = this.store.getQuads(null, null, null, null);\n\n            for (let i = 0; i < quads.length; i++) {\n                writer.addQuad(quads[i]);\n            }\n\n            writer.end((error, result) => {\n                if(error) reject(error);\n                resolve(result);\n            });\n\n        })\n        \n    }\n\n}"],"file":"parser.js"}