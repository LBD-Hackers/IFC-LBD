{"version":3,"sources":["../../../src/parsers/parser.ts"],"names":["Parser","ifcAPI","modelID","format","SerializationFormat","JSONLD","verbose","prefixes","N3","Store","extensionFunctions","geoSPARQLFunctions","getJSONLD","NQuads","getNQuads","store","size","getStoreSize","jsonLDObject","rdf","tripleCount","length","quads","addQuads","query","engine","sources","result","updateResult","resultToString","data","pipe","process","stdout","nquads","getQuads","doc","compacted","serializeStoreContent","N3Format","Turtle","Promise","resolve","reject","writer","Writer","i","addQuad","end","error"],"mappings":"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","sourcesContent":["import { JSONLD, N3Format, SerializationFormat } from \"../helpers/BaseDefinitions\";\r\nimport * as WebIFC from \"web-ifc/web-ifc-api.js\";\r\nimport { prefixes } from '../helpers/prefixes';\r\nimport { extensionFunctions } from '../helpers/communica-extension-functions';\r\nimport { toRDF, fromRDF, compact } from \"jsonld\";\r\nimport * as N3 from 'n3';\r\nimport { newEngine } from '@comunica/actor-init-sparql-rdfjs';\r\nimport { geoSPARQLFunctions } from \"comunica-geosparql/lib/bundles/bundle.umd\";\r\n\r\nexport class Parser{\r\n\r\n    public jsonLDObject: JSONLD = {\"@context\": prefixes, \"@graph\": []};\r\n\r\n    public modelID: number;\r\n    public ifcAPI: WebIFC.IfcAPI;\r\n    public verbose: boolean;\r\n    public format: SerializationFormat;\r\n    public communicaEngine = newEngine();\r\n    public store: N3.Store = new N3.Store();\r\n    public extensionFunctions = {...extensionFunctions, ...geoSPARQLFunctions};\r\n\r\n    constructor(ifcAPI: WebIFC.IfcAPI, modelID: number, format: SerializationFormat = SerializationFormat.JSONLD, verbose: boolean = false){\r\n        this.modelID = modelID;\r\n        this.ifcAPI = ifcAPI;\r\n        this.verbose = verbose;\r\n        this.format = format;\r\n    }\r\n\r\n    public async getTriples(): Promise<JSONLD|string>{\r\n        if(this.format == SerializationFormat.JSONLD) return this.getJSONLD();\r\n        if(this.format == SerializationFormat.NQuads) return this.getNQuads();\r\n        return \"\";\r\n    }\r\n\r\n    public async getTripleCount(): Promise<number>{\r\n        if(this.store.size > 0){\r\n            return this.getStoreSize();\r\n        }\r\n        const rdf: any = await toRDF(this.jsonLDObject);\r\n        const tripleCount = rdf.length;\r\n        return tripleCount;\r\n    }\r\n\r\n    public async loadInStore(): Promise<void>{\r\n        const quads: any = await toRDF(this.jsonLDObject);\r\n        await this.store.addQuads(quads);\r\n    }\r\n\r\n    public async executeUpdateQuery(query: string): Promise<void>{\r\n        // Initiate the update\r\n        const engine = newEngine();\r\n        const result: any = await engine.query(query, {\r\n            sources: [this.store],\r\n            extensionFunctions: this.extensionFunctions\r\n        });\r\n        \r\n        // Wait for the update to complete\r\n        await result.updateResult;\r\n    }\r\n\r\n    public async executeSelectQuery(query: string): Promise<void>{\r\n        // Initiate the update\r\n        const engine = newEngine();\r\n        const result: any = await engine.query(query, {\r\n            sources: [this.store],\r\n            extensionFunctions: this.extensionFunctions\r\n        });\r\n        \r\n        const { data } = await engine.resultToString(result,\r\n            'application/sparql-results+json');\r\n        data.pipe(process.stdout); // Print to standard output\r\n    }\r\n\r\n    public getStoreSize(): number{\r\n        return this.store.size;\r\n    }\r\n\r\n    private async getJSONLD(): Promise<JSONLD>{\r\n        // If store is up, serialize the content of the store\r\n        if(this.store.size > 0){\r\n            const nquads = this.store.getQuads(null, null, null, null);\r\n            const doc = await fromRDF(nquads);\r\n            const compacted = await compact(doc, this.jsonLDObject[\"@context\"]);\r\n            return compacted as JSONLD;\r\n        }\r\n        // If not, simply return the JSON-LD object\r\n        return this.jsonLDObject;\r\n    }\r\n\r\n    private async getNQuads(): Promise<any>{\r\n        // If store is up, serialize the content of the store\r\n        if(this.store.size > 0){\r\n            return await this.serializeStoreContent(N3Format.NQuads);\r\n        }\r\n        // If not, simply convert the JSON-LD object\r\n        return await toRDF(this.jsonLDObject, {format: 'application/n-quads'});\r\n    }\r\n\r\n    private async serializeStoreContent(format: N3Format = N3Format.Turtle): Promise<string>{\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const writer = new N3.Writer({ prefixes: prefixes, format });\r\n            const quads = this.store.getQuads(null, null, null, null);\r\n\r\n            for (let i = 0; i < quads.length; i++) {\r\n                writer.addQuad(quads[i]);\r\n            }\r\n\r\n            writer.end((error, result) => {\r\n                if(error) reject(error);\r\n                resolve(result);\r\n            });\r\n\r\n        })\r\n        \r\n    }\r\n\r\n}"],"file":"parser.js"}