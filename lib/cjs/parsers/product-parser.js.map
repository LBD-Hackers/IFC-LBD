{"version":3,"sources":["../../../src/parsers/product-parser.ts"],"names":["ProductParser","verbose","console","log","time","buildProducts","jsonLDObject","timeEnd","getTripleCount","tripleCount","getTriples","graph","skippedTypes","IFCOPENINGELEMENT","subTypes","IFCELEMENT","filter","typeID","indexOf","expressIDArray","typeId","push","ifcAPI","properties","getAllItemsOfType","modelID","i","length","expressID","getItemProperties","type","GlobalId","URI","value","IfcElements","Parser"],"mappings":"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","sourcesContent":["import {\n    IFCELEMENT,\n    IFCOPENINGELEMENT\n} from 'web-ifc';\n\nimport { getElementSubtypes } from \"../helpers/class-assignment\";\nimport { Parser } from \"./parser\";\nimport { JSONLD } from \"../helpers/BaseDefinitions\";\nimport { defaultURIBuilder } from \"../helpers/uri-builder\";\nimport { IfcElements } from \"../helpers/IfcElementsMap\";\n\nexport class ProductParser extends Parser{\n\n    public async doParse(): Promise<JSONLD|string>{\n\n        this.verbose && console.log(\"Started PRODUCTS parsing\");\n        this.verbose && console.log(\"\");\n        console.time(\"Finished products parsing\");\n\n        this.verbose && console.log(\"## STEP 1: CLASS ASSIGNMENT ##\");\n        this.verbose && console.time(\"1/1: Finding products\");\n        this.jsonLDObject[\"@graph\"] = await this.buildProducts();\n        this.verbose && console.timeEnd(\"1/1: Finding products\");\n        this.verbose && console.log(\"\");\n\n        console.timeEnd(\"Finished products parsing\");\n\n        if(this.verbose){\n            const tripleCount = await this.getTripleCount();\n            console.log(\"Total triples: \" + tripleCount);\n        }\n\n        return await this.getTriples();\n\n    }\n\n    private async buildProducts(): Promise<any[]>{\n\n        const graph = [];\n\n        const skippedTypes = [IFCOPENINGELEMENT];\n\n        // Get all subTypes of IfcElement\n        const subTypes: number[] = getElementSubtypes(IFCELEMENT)\n            .filter(typeID => skippedTypes.indexOf(typeID) == -1);  // Filter out skipped types\n    \n\n        // Get all items in model that belong to any of these types\n        let expressIDArray: number[] = [];\n        for(let typeId of subTypes){\n            expressIDArray.push(...await this.ifcAPI.properties.getAllItemsOfType(this.modelID, typeId, false));\n        }\n\n        for (let i = 0; i < expressIDArray.length; i++) {\n            const expressID = expressIDArray[i];\n            \n            const {type, GlobalId} = await this.ifcAPI.properties.getItemProperties(this.modelID, expressID);\n            const URI = defaultURIBuilder(GlobalId.value);\n\n            // Push product\n            graph.push({\n                \"@id\": URI,\n                \"@type\": `ifc:${IfcElements[type]}`\n            });\n            \n        }\n\n        return graph;\n\n    }\n\n}"],"file":"product-parser.js"}