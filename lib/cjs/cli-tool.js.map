{"version":3,"sources":["../../src/cli-tool.ts"],"names":["readFileP","util","promisify","readFile","writeFileP","writeFile","supportedSubsets","CLITool","process","argv","version","command","yargs","positional","describe","choices","demandOption","verbose","console","info","option","alias","type","description","parse","lbdParser","undefined","log","subset","_","toLowerCase","indexOf","error","map","s","join","repeat","length","toLocaleUpperCase","time","ifcApi","WebIFC","IfcAPI","Init","inputFile","fileData","modelID","OpenModel","timeEnd","parseTriples","triples","CloseModel","serialize","parseBOTTriples","parseFSOTriples","parseProductTriples","parsePropertyTriples","parseTSOTriples","format","outputFile","JSON","stringify","fp","replace","nquads","toString","zipped"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAGA;;;;;;;;;;;;;;;;;;AALA,IAAMA,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeC,YAAf,CAAlB;AACA,IAAMC,UAAU,GAAGH,IAAI,CAACC,SAAL,CAAeG,aAAf,CAAnB;AAMA,IAAMC,gBAAgB,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,EAA2B,YAA3B,EAAyC,KAAzC,CAAzB;;IAEaC,O;;;;;;;;0EAIT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEsB,uBAAM,sBAAQC,OAAO,CAACC,IAAhB,CAAN,EACbC,OADa,CACLA,gBADK,EAEbC,OAFa,CAEL,UAFK,EAEO,WAFP,EAEoB,UAACC,KAAD,EAAW;AACzC,yBAAOA,KAAK,CACXC,UADM,CACK,QADL,EACe;AAClBC,oBAAAA,QAAQ,EAAE,0CADQ;AAElBC,oBAAAA,OAAO,EAAET,gBAFS;AAGlBU,oBAAAA,YAAY,EAAE;AAHI,mBADf,CAAP;AAMH,iBATa,EASX,UAACP,IAAD,EAAU;AACT,sBAAIA,IAAI,CAACQ,OAAT,EAAkBC,OAAO,CAACC,IAAR,wBAA6BV,IAAI,CAAC,WAAD,CAAjC,GADT,CAET;AACH,iBAZa,EAabW,MAba,CAaN,YAbM,EAaQ;AAClBC,kBAAAA,KAAK,EAAE,GADW;AAElBC,kBAAAA,IAAI,EAAE,QAFY;AAGlBC,kBAAAA,WAAW,EAAE,aAHK;AAIlBP,kBAAAA,YAAY,EAAE;AAJI,iBAbR,EAmBbI,MAnBa,CAmBN,aAnBM,EAmBS;AACnBC,kBAAAA,KAAK,EAAE,GADY;AAEnBC,kBAAAA,IAAI,EAAE,QAFa;AAGnBC,kBAAAA,WAAW,EAAE,2BAHM;AAInB,6BAAS;AAJU,iBAnBT,EAyBbH,MAzBa,CAyBN,QAzBM,EAyBI;AACdC,kBAAAA,KAAK,EAAE,GADO;AAEdC,kBAAAA,IAAI,EAAE,QAFQ;AAGdC,kBAAAA,WAAW,EAAE,eAHC;AAIdR,kBAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,CAJK;AAKd,6BAAS;AALK,iBAzBJ,EAgCbK,MAhCa,CAgCN,SAhCM,EAgCK;AACfC,kBAAAA,KAAK,EAAE,GADQ;AAEfC,kBAAAA,IAAI,EAAE,SAFS;AAGfC,kBAAAA,WAAW,EAAE;AAHE,iBAhCL,EAqCbC,KArCa,EAFtB;;AAAA;AAEI,qBAAKf,IAFT;AAAA,iDAyCW,KAAKA,IAzChB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+EA6CA,kBAAuBgB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEO,KAAKhB,IAAL,CAAU,YAAV,KAA2BiB,SAFlC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAII,qBAAKjB,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,8BAAZ,CAAxB;AAEMC,gBAAAA,MANV,GAM2B,KAAKnB,IAAL,CAAUoB,CAAV,CAAY,CAAZ,EAAeC,WAAf,EAN3B;;AAAA,sBAOOxB,gBAAgB,CAACyB,OAAjB,CAAyBH,MAAzB,KAAoC,CAAC,CAP5C;AAAA;AAAA;AAAA;;AAAA,kDAQeV,OAAO,CAACc,KAAR,6DAAmE1B,gBAAgB,CAAC2B,GAAjB,CAAqB,UAAAC,CAAC;AAAA,qCAAQA,CAAR;AAAA,iBAAtB,EAAoCC,IAApC,CAAyC,IAAzC,CAAnE,OARf;;AAAA;AAWI;AACA,qBAAK1B,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,IAAIS,MAAJ,CAAW,KAAKR,MAAM,CAACS,MAAvB,CAAZ,CAAxB;AACA,qBAAK5B,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,sBAA0BC,MAAM,CAACU,iBAAP,EAA1B,gBAAxB;AACA,qBAAK7B,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,IAAIS,MAAJ,CAAW,KAAKR,MAAM,CAACS,MAAvB,CAAZ,CAAxB;AACA,qBAAK5B,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,EAAZ,CAAxB;AACA,qBAAKlB,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACqB,IAAR,CAAa,iCAAb,CAAxB;AACMC,gBAAAA,MAjBV,GAiBmB,IAAIC,MAAM,CAACC,MAAX,EAjBnB;AAAA;AAAA,uBAkBUF,MAAM,CAACG,IAAP,EAlBV;;AAAA;AAAA;AAAA,uBAmB2B3C,SAAS,CAAC,KAAKS,IAAL,CAAUmC,SAAX,CAnBpC;;AAAA;AAmBUC,gBAAAA,QAnBV;AAoBUC,gBAAAA,OApBV,GAoBoBN,MAAM,CAACO,SAAP,CAAiBF,QAAjB,CApBpB;AAqBI,qBAAKpC,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAAC8B,OAAR,CAAgB,iCAAhB,CAAxB;AACA,qBAAKvC,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,EAAZ,CAAxB,CAtBJ,CAwBI;;AAxBJ;AAAA,uBAyB0B,KAAKsB,YAAL,CAAkBxB,SAAlB,EAA6Be,MAA7B,EAAqCZ,MAArC,EAA6CkB,OAA7C,CAzB1B;;AAAA;AAyBUI,gBAAAA,OAzBV;;AAAA,sBA0BO,CAACA,OAAD,IAAYA,OAAO,IAAIxB,SA1B9B;AAAA;AAAA;AAAA;;AAAA,kDA0BgDR,OAAO,CAACS,GAAR,CAAY,oCAAZ,CA1BhD;;AAAA;AA4BI;AACAa,gBAAAA,MAAM,CAACW,UAAP,CAAkBL,OAAlB,EA7BJ,CA+BI;;AA/BJ;AAAA,uBAgCU,KAAKM,SAAL,CAAeF,OAAf,CAhCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAoCA,kBAA2BzB,SAA3B,EAAiDe,MAAjD,EAAwEZ,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwFkB,gBAAAA,OAAxF,8DAA0G,CAA1G;;AAAA,sBAEOlB,MAAM,IAAI,KAFjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEwCH,SAAS,CAAC4B,eAAV,CAA0Bb,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKrC,IAAL,CAAU,SAAV,CAA3C,CAFxC;;AAAA;AAEwByC,gBAAAA,OAFxB;;AAAA;AAAA,sBAGOtB,MAAM,IAAI,KAHjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGwCH,SAAS,CAAC6B,eAAV,CAA0Bd,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKrC,IAAL,CAAU,SAAV,CAA3C,CAHxC;;AAAA;AAGwByC,gBAAAA,OAHxB;;AAAA;AAAA,sBAIOtB,MAAM,IAAI,UAJjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAI6CH,SAAS,CAAC8B,mBAAV,CAA8Bf,MAA9B,EAAsCM,OAAtC,EAA+C,KAAKrC,IAAL,CAAU,SAAV,CAA/C,CAJ7C;;AAAA;AAI6ByC,gBAAAA,OAJ7B;;AAAA;AAAA,sBAKOtB,MAAM,IAAI,YALjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAK+CH,SAAS,CAAC+B,oBAAV,CAA+BhB,MAA/B,EAAuCM,OAAvC,EAAgD,KAAKrC,IAAL,CAAU,SAAV,CAAhD,CAL/C;;AAAA;AAK+ByC,gBAAAA,OAL/B;;AAAA;AAAA,sBAMOtB,MAAM,IAAI,KANjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAMwCH,SAAS,CAACgC,eAAV,CAA0BjB,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKrC,IAAL,CAAU,SAAV,CAA3C,CANxC;;AAAA;AAMwByC,gBAAAA,OANxB;;AAAA;AAAA,kDAQWA,OARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+EAWA,kBAAwBA,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEO,KAAKzC,IAAL,CAAUiD,MAAV,IAAoB,QAF3B;AAAA;AAAA;AAAA;;AAGQ,qBAAKjD,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACqB,IAAR,CAAa,oBAAb,CAAxB;AAHR;AAAA,uBAIcnC,UAAU,CAAC,KAAKK,IAAL,CAAUkD,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeX,OAAf,EAAwB,IAAxB,EAA8B,IAA9B,CAAvB,EAA4D,MAA5D,CAJxB;;AAAA;AAKQ,qBAAKzC,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAAC8B,OAAR,CAAgB,oBAAhB,CAAxB;;AALR;AAAA,sBAOO,KAAKvC,IAAL,CAAUiD,MAAV,IAAoB,QAP3B;AAAA;AAAA;AAAA;;AAQQ,qBAAKjD,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACqB,IAAR,CAAa,mBAAb,CAAxB;AACMuB,gBAAAA,EATd,GASmB,KAAKrD,IAAL,CAAUkD,UAAV,CAAqBI,OAArB,CAA6B,OAA7B,EAAsC,QAAtC,CATnB;AAUcC,gBAAAA,MAVd,GAU+B,OAAOd,OAAP,IAAkB,QAAlB,GAA6BA,OAAO,CAACe,QAAR,EAA7B,GAAkDf,OAVjF;AAAA;AAAA,uBAWqC,oBAAKc,MAAL,CAXrC;;AAAA;AAWcE,gBAAAA,MAXd;AAAA;AAAA,uBAYc9D,UAAU,CAAC0D,EAAD,EAAKI,MAAL,EAAa,MAAb,CAZxB;;AAAA;AAaQ,qBAAKzD,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAAC8B,OAAR,CAAgB,mBAAhB,CAAxB;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import yargs from 'yargs';\r\nimport { hideBin } from 'yargs/helpers';\r\nimport {version} from '../package.json';\r\nimport { readFile, writeFile } from \"fs\";\r\nimport * as util from \"util\";\r\nconst readFileP = util.promisify(readFile);\r\nconst writeFileP = util.promisify(writeFile);\r\nimport * as WebIFC from \"web-ifc/web-ifc-api\";\r\nimport { LBDParser } from '.';\r\nimport { JSONLD } from './helpers/BaseDefinitions';\r\nimport { gzip } from \"node-gzip\";\r\n\r\nconst supportedSubsets = [\"bot\", \"fso\", \"products\", \"properties\", \"tso\"];\r\n\r\nexport class CLITool{\r\n\r\n    public argv: any;\r\n\r\n    public async init(){\r\n\r\n        this.argv = await yargs(hideBin(process.argv))\r\n            .version(version)   \r\n            .command('[subset]', 'parse ifc', (yargs) => {\r\n                return yargs\r\n                .positional('subset', {\r\n                    describe: 'what information do you wish to extract?',\r\n                    choices: supportedSubsets,\r\n                    demandOption: true\r\n                })\r\n            }, (argv) => {\r\n                if (argv.verbose) console.info(`Parsing IFC :${argv[\"file-path\"]}`)\r\n                // serve(argv.port)\r\n            })\r\n            .option('input-file', {\r\n                alias: 'i',\r\n                type: 'string',\r\n                description: 'Path to IFC',\r\n                demandOption: true\r\n            })\r\n            .option('output-file', {\r\n                alias: 'o',\r\n                type: 'string',\r\n                description: 'Path to resulting triples',\r\n                default: './triples.json'\r\n            })\r\n            .option('format', {\r\n                alias: 'f',\r\n                type: 'string',\r\n                description: 'Output format',\r\n                choices: [\"jsonld\", \"nquads\"],\r\n                default: 'jsonld'\r\n            })\r\n            .option('verbose', {\r\n                alias: 'v',\r\n                type: 'boolean',\r\n                description: 'Run with verbose logging'\r\n            })\r\n            .parse();\r\n    \r\n        return this.argv;\r\n\r\n    }\r\n\r\n    public async parseFile(lbdParser: LBDParser){\r\n        \r\n        if(this.argv[\"input-file\"] == undefined) return;\r\n\r\n        this.argv[\"verbose\"] && console.log(\"Running with verbose logging\");\r\n\r\n        const subset: string = this.argv._[0].toLowerCase();\r\n        if(supportedSubsets.indexOf(subset) == -1){\r\n            return console.error(`Unsupported subset option. Supported options are [${supportedSubsets.map(s => `\"${s}\"`).join(\", \")}]`)\r\n        }\r\n\r\n        // Init API and load model\r\n        this.argv[\"verbose\"] && console.log(\"#\".repeat(21 + subset.length));\r\n        this.argv[\"verbose\"] && console.log(`# IFC-LBD <${subset.toLocaleUpperCase()}> parser #`);\r\n        this.argv[\"verbose\"] && console.log(\"#\".repeat(21 + subset.length));\r\n        this.argv[\"verbose\"] && console.log(\"\");\r\n        this.argv[\"verbose\"] && console.time(\"Initilized API and loaded model\");\r\n        const ifcApi = new WebIFC.IfcAPI();\r\n        await ifcApi.Init();\r\n        const fileData = await readFileP(this.argv.inputFile);\r\n        const modelID = ifcApi.OpenModel(fileData);\r\n        this.argv[\"verbose\"] && console.timeEnd(\"Initilized API and loaded model\");\r\n        this.argv[\"verbose\"] && console.log(\"\");\r\n\r\n        // Init LBD Parser and parse triples\r\n        const triples = await this.parseTriples(lbdParser, ifcApi, subset, modelID);\r\n        if(!triples || triples == undefined) return console.log(\"Found nothing relevant in the file\");\r\n\r\n        // Close the model, all memory is freed\r\n        ifcApi.CloseModel(modelID);\r\n\r\n        // Serialize result\r\n        await this.serialize(triples);\r\n\r\n    }\r\n\r\n    private async parseTriples(lbdParser: LBDParser, ifcApi: WebIFC.IfcAPI, subset: string, modelID: number = 0): Promise<JSONLD>{\r\n        let triples;\r\n        if(subset == \"bot\") triples = await lbdParser.parseBOTTriples(ifcApi, modelID, this.argv[\"verbose\"]);\r\n        if(subset == \"fso\") triples = await lbdParser.parseFSOTriples(ifcApi, modelID, this.argv[\"verbose\"]);\r\n        if(subset == \"products\") triples = await lbdParser.parseProductTriples(ifcApi, modelID, this.argv[\"verbose\"]);\r\n        if(subset == \"properties\") triples = await lbdParser.parsePropertyTriples(ifcApi, modelID, this.argv[\"verbose\"]);\r\n        if(subset == \"tso\") triples = await lbdParser.parseTSOTriples(ifcApi, modelID, this.argv[\"verbose\"]);\r\n\r\n        return triples;\r\n    }\r\n\r\n    private async serialize(triples: JSONLD): Promise<void>{\r\n\r\n        if(this.argv.format == \"jsonld\"){\r\n            this.argv[\"verbose\"] && console.time(\"Serialized JSON-LD\");\r\n            await writeFileP(this.argv.outputFile, JSON.stringify(triples, null, \"\\t\"), 'utf8');\r\n            this.argv[\"verbose\"] && console.timeEnd(\"Serialized JSON-LD\");\r\n        }\r\n        if(this.argv.format == \"nquads\"){\r\n            this.argv[\"verbose\"] && console.time(\"Serialized NQuads\");\r\n            const fp = this.argv.outputFile.replace(\".json\", \".nq.gz\");\r\n            const nquads: string = typeof triples != \"string\" ? triples.toString() : triples;\r\n            const zipped: Buffer = await gzip(nquads);\r\n            await writeFileP(fp, zipped, 'utf8');\r\n            this.argv[\"verbose\"] && console.timeEnd(\"Serialized NQuads\");\r\n        }\r\n\r\n    }\r\n\r\n}"],"file":"cli-tool.js"}