{"version":3,"sources":["../../src/cli-tool.ts"],"names":["readFileP","util","promisify","readFile","writeFileP","writeFile","supportedSubsets","CLITool","process","argv","version","command","yargs","positional","describe","choices","demandOption","verbose","console","info","option","alias","type","description","parse","lbdParser","undefined","log","subset","_","toLowerCase","indexOf","error","map","s","join","ifcApi","WebIFC","IfcAPI","Init","inputFile","fileData","modelID","OpenModel","parseBOTTriples","triples","parseFSOTriples","parseProductTriples","CloseModel","format","outputFile","JSON","stringify","fp","replace","nquads","toString"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;AAFA,IAAMA,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeC,YAAf,CAAlB;AACA,IAAMC,UAAU,GAAGH,IAAI,CAACC,SAAL,CAAeG,aAAf,CAAnB;AAIA,IAAMC,gBAAgB,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAAzB;;IAEaC,O;;;;;;;;0EAIT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEsB,uBAAM,sBAAQC,OAAO,CAACC,IAAhB,CAAN,EACbC,OADa,CACLA,gBADK,EAEbC,OAFa,CAEL,UAFK,EAEO,WAFP,EAEoB,UAACC,KAAD,EAAW;AACzC,yBAAOA,KAAK,CACXC,UADM,CACK,QADL,EACe;AAClBC,oBAAAA,QAAQ,EAAE,0CADQ;AAElBC,oBAAAA,OAAO,EAAET,gBAFS;AAGlBU,oBAAAA,YAAY,EAAE;AAHI,mBADf,CAAP;AAMH,iBATa,EASX,UAACP,IAAD,EAAU;AACT,sBAAIA,IAAI,CAACQ,OAAT,EAAkBC,OAAO,CAACC,IAAR,wBAA6BV,IAAI,CAAC,WAAD,CAAjC,GADT,CAET;AACH,iBAZa,EAabW,MAba,CAaN,YAbM,EAaQ;AAClBC,kBAAAA,KAAK,EAAE,GADW;AAElBC,kBAAAA,IAAI,EAAE,QAFY;AAGlBC,kBAAAA,WAAW,EAAE,aAHK;AAIlBP,kBAAAA,YAAY,EAAE;AAJI,iBAbR,EAmBbI,MAnBa,CAmBN,aAnBM,EAmBS;AACnBC,kBAAAA,KAAK,EAAE,GADY;AAEnBC,kBAAAA,IAAI,EAAE,QAFa;AAGnBC,kBAAAA,WAAW,EAAE,2BAHM;AAInB,6BAAS;AAJU,iBAnBT,EAyBbH,MAzBa,CAyBN,QAzBM,EAyBI;AACdC,kBAAAA,KAAK,EAAE,GADO;AAEdC,kBAAAA,IAAI,EAAE,QAFQ;AAGdC,kBAAAA,WAAW,EAAE,eAHC;AAIdR,kBAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,QAAX,CAJK;AAKd,6BAAS;AALK,iBAzBJ,EAgCbK,MAhCa,CAgCN,SAhCM,EAgCK;AACfC,kBAAAA,KAAK,EAAE,GADQ;AAEfC,kBAAAA,IAAI,EAAE,SAFS;AAGfC,kBAAAA,WAAW,EAAE;AAHE,iBAhCL,EAqCbC,KArCa,EAFtB;;AAAA;AAEI,qBAAKf,IAFT;AAAA,iDAyCW,KAAKA,IAzChB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+EA6CA,kBAAuBgB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEO,KAAKhB,IAAL,CAAU,YAAV,KAA2BiB,SAFlC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAII,qBAAKjB,IAAL,CAAU,SAAV,KAAwBS,OAAO,CAACS,GAAR,CAAY,8BAAZ,CAAxB;AAEMC,gBAAAA,MANV,GAMmB,KAAKnB,IAAL,CAAUoB,CAAV,CAAY,CAAZ,EAAeC,WAAf,EANnB;;AAAA,sBAOOxB,gBAAgB,CAACyB,OAAjB,CAAyBH,MAAzB,KAAoC,CAAC,CAP5C;AAAA;AAAA;AAAA;;AAAA,kDAQeV,OAAO,CAACc,KAAR,6DAAmE1B,gBAAgB,CAAC2B,GAAjB,CAAqB,UAAAC,CAAC;AAAA,qCAAQA,CAAR;AAAA,iBAAtB,EAAoCC,IAApC,CAAyC,IAAzC,CAAnE,OARf;;AAAA;AAWI;AACMC,gBAAAA,MAZV,GAYmB,IAAIC,MAAM,CAACC,MAAX,EAZnB;AAAA;AAAA,uBAaUF,MAAM,CAACG,IAAP,EAbV;;AAAA;AAAA;AAAA,uBAc2BvC,SAAS,CAAC,KAAKS,IAAL,CAAU+B,SAAX,CAdpC;;AAAA;AAcUC,gBAAAA,QAdV;AAeUC,gBAAAA,OAfV,GAeoBN,MAAM,CAACO,SAAP,CAAiBF,QAAjB,CAfpB,EAiBI;;AAjBJ,sBAmBOb,MAAM,IAAI,KAnBjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmBwCH,SAAS,CAACmB,eAAV,CAA0BR,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKjC,IAAL,CAAU,SAAV,CAA3C,CAnBxC;;AAAA;AAmBwBoC,gBAAAA,OAnBxB;;AAAA;AAAA,sBAoBOjB,MAAM,IAAI,KApBjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAoBwCH,SAAS,CAACqB,eAAV,CAA0BV,MAA1B,EAAkCM,OAAlC,EAA2C,KAAKjC,IAAL,CAAU,SAAV,CAA3C,CApBxC;;AAAA;AAoBwBoC,gBAAAA,OApBxB;;AAAA;AAAA,sBAqBOjB,MAAM,IAAI,UArBjB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqB6CH,SAAS,CAACsB,mBAAV,CAA8BX,MAA9B,EAAsCM,OAAtC,EAA+C,KAAKjC,IAAL,CAAU,SAAV,CAA/C,CArB7C;;AAAA;AAqB6BoC,gBAAAA,OArB7B;;AAAA;AAAA,sBAuBO,CAACA,OAAD,IAAYA,OAAO,IAAInB,SAvB9B;AAAA;AAAA;AAAA;;AAAA,kDAuBgDR,OAAO,CAACS,GAAR,CAAY,oCAAZ,CAvBhD;;AAAA;AAyBI;AACAS,gBAAAA,MAAM,CAACY,UAAP,CAAkBN,OAAlB,EA1BJ,CA4BI;;AA5BJ,sBA6BO,KAAKjC,IAAL,CAAUwC,MAAV,IAAoB,QA7B3B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA8Bc7C,UAAU,CAAC,KAAKK,IAAL,CAAUyC,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,OAAf,EAAwB,IAAxB,EAA8B,IAA9B,CAAvB,EAA4D,MAA5D,CA9BxB;;AAAA;AAAA,sBAgCO,KAAKpC,IAAL,CAAUwC,MAAV,IAAoB,QAhC3B;AAAA;AAAA;AAAA;;AAiCcI,gBAAAA,EAjCd,GAiCmB,KAAK5C,IAAL,CAAUyC,UAAV,CAAqBI,OAArB,CAA6B,OAA7B,EAAsC,KAAtC,CAjCnB;AAkCcC,gBAAAA,MAlCd,GAkC+B,OAAOV,OAAP,IAAkB,QAAlB,GAA6BA,OAAO,CAACW,QAAR,EAA7B,GAAkDX,OAlCjF;AAAA;AAAA,uBAmCczC,UAAU,CAACiD,EAAD,EAAKE,MAAL,EAAa,MAAb,CAnCxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport {version} from '../package.json';\nimport { readFile, writeFile } from \"fs\";\nimport * as util from \"util\";\nconst readFileP = util.promisify(readFile);\nconst writeFileP = util.promisify(writeFile);\nimport * as WebIFC from \"web-ifc/web-ifc-api\";\nimport { LBDParser } from '.';\n\nconst supportedSubsets = [\"bot\", \"fso\", \"products\"];\n\nexport class CLITool{\n\n    public argv: any;\n\n    public async init(){\n\n        this.argv = await yargs(hideBin(process.argv))\n            .version(version)   \n            .command('[subset]', 'parse ifc', (yargs) => {\n                return yargs\n                .positional('subset', {\n                    describe: 'what information do you wish to extract?',\n                    choices: supportedSubsets,\n                    demandOption: true\n                })\n            }, (argv) => {\n                if (argv.verbose) console.info(`Parsing IFC :${argv[\"file-path\"]}`)\n                // serve(argv.port)\n            })\n            .option('input-file', {\n                alias: 'i',\n                type: 'string',\n                description: 'Path to IFC',\n                demandOption: true\n            })\n            .option('output-file', {\n                alias: 'o',\n                type: 'string',\n                description: 'Path to resulting triples',\n                default: './triples.json'\n            })\n            .option('format', {\n                alias: 'f',\n                type: 'string',\n                description: 'Output format',\n                choices: [\"jsonld\", \"nquads\"],\n                default: 'jsonld'\n            })\n            .option('verbose', {\n                alias: 'v',\n                type: 'boolean',\n                description: 'Run with verbose logging'\n            })\n            .parse();\n    \n        return this.argv;\n\n    }\n\n    public async parseFile(lbdParser: LBDParser){\n        \n        if(this.argv[\"input-file\"] == undefined) return;\n\n        this.argv[\"verbose\"] && console.log(\"Running with verbose logging\");\n\n        const subset = this.argv._[0].toLowerCase();\n        if(supportedSubsets.indexOf(subset) == -1){\n            return console.error(`Unsupported subset option. Supported options are [${supportedSubsets.map(s => `\"${s}\"`).join(\", \")}]`)\n        }\n\n        // Init API and load model\n        const ifcApi = new WebIFC.IfcAPI();\n        await ifcApi.Init();\n        const fileData = await readFileP(this.argv.inputFile);\n        const modelID = ifcApi.OpenModel(fileData);\n\n        // Init LBD Parser and parse BOT\n        let triples;\n        if(subset == \"bot\") triples = await lbdParser.parseBOTTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n        if(subset == \"fso\") triples = await lbdParser.parseFSOTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n        if(subset == \"products\") triples = await lbdParser.parseProductTriples(ifcApi, modelID, this.argv[\"verbose\"]);\n\n        if(!triples || triples == undefined) return console.log(\"Found nothing relevant in the file\");\n\n        // Close the model, all memory is freed\n        ifcApi.CloseModel(modelID);\n\n        // Serialize result\n        if(this.argv.format == \"jsonld\"){\n            await writeFileP(this.argv.outputFile, JSON.stringify(triples, null, \"\\t\"), 'utf8');\n        }\n        if(this.argv.format == \"nquads\"){\n            const fp = this.argv.outputFile.replace(\".json\", \".nq\");\n            const nquads: string = typeof triples != \"string\" ? triples.toString() : triples;\n            await writeFileP(fp, nquads, 'utf8');\n        }\n\n    }\n\n}"],"file":"cli-tool.js"}